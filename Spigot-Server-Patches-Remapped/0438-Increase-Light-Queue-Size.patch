From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 8 Apr 2020 21:24:05 -0400
Subject: [PATCH] Increase Light Queue Size

Wiz mentioned that large WorldEdit operations cause light to run on
main thread. The queue was small, set to 5.. this bumps it to 20
but makes it configurable per-world.

The main risk of increasing this higher is during shutdown, some
queued light updates may be lost because mojang did not flush the
light engine on shutdown...

The queue size only puts a cap on max loss, doesn't solve that problem.

diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index b987399ca3786a30f87c98658e8bf04d4aa2e2da..08949526752e4d66e4c0df11f76f6500846e1fe4 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -617,4 +617,9 @@ public class PaperWorldConfig {
     private void zombieVillagerInfectionChance() {
         zombieVillagerInfectionChance = getDouble("zombie-villager-infection-chance", zombieVillagerInfectionChance);
     }
+
+    public int lightQueueSize = 20;
+    private void lightQueueSize() {
+        lightQueueSize = getInt("light-queue-size", lightQueueSize);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 88a9dc59df54a203d5ccc6ab5e8742b6ca2d19cc..64a9b609d4fb6beb24eda7db8412126984222011 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -768,7 +768,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         this.executeModerately();
         // CraftBukkit end
         worldloadlistener.func_219510_b();
-        chunkproviderserver.func_212863_j_().func_215598_a(5);
+        chunkproviderserver.func_212863_j_().func_215598_a(worldserver.paperConfig.lightQueueSize); // Paper - increase light queue size
         this.func_240794_aZ_();
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/server/ChunkManager.java b/src/main/java/net/minecraft/world/server/ChunkManager.java
index bf844b9a86bbd9cf7b3fbfaa3b4a24df2120389a..da85192301917588db36f0f96f51229ad8a318ec 100644
--- a/src/main/java/net/minecraft/world/server/ChunkManager.java
+++ b/src/main/java/net/minecraft/world/server/ChunkManager.java
@@ -111,7 +111,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
     public static final int field_219249_a = 33 + ChunkStatus.func_222600_b();
     // Paper start - faster copying
     public final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219251_e = new com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<>(); // Paper - faster copying
-    public final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219252_f = new net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap(); // Paper - faster copying
+    public final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219252_f = new ProtectedVisibleChunksMap(); // Paper - faster copying
 
     private class ProtectedVisibleChunksMap extends com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder> {
         @Override
@@ -315,7 +315,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
         } finally {
             this.isIterating = prev;
             if (!this.isIterating && this.hasPendingVisibleUpdate) {
-                ((net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap)this.field_219252_f).copyFrom(this.pendingVisibleChunks);
+                ((ProtectedVisibleChunksMap)this.field_219252_f).copyFrom(this.pendingVisibleChunks);
                 this.pendingVisibleChunks.clear();
                 this.hasPendingVisibleUpdate = false;
             }
@@ -328,7 +328,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
             synchronized (this.field_219252_f) {
                 if (DEBUG_ASYNC_VISIBLE_CHUNKS) new Throwable("Async getVisibleChunks").printStackTrace();
                 if (this.visibleChunksClone == null) {
-                    this.visibleChunksClone = this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.clone() : ((net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap)this.field_219252_f).clone();
+                    this.visibleChunksClone = this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.clone() : ((ProtectedVisibleChunksMap)this.field_219252_f).clone();
                 }
                 return this.visibleChunksClone;
             }
@@ -341,10 +341,10 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
         // Paper start - mt safe get
         if (Thread.currentThread() != this.field_219255_i.field_217407_c) {
             synchronized (this.field_219252_f) {
-                return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap)this.field_219252_f).safeGet(p_219219_1_));
+                return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((ProtectedVisibleChunksMap)this.field_219252_f).safeGet(p_219219_1_));
             }
         }
-        return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap)this.field_219252_f).safeGet(p_219219_1_));
+        return (ChunkHolder) (this.hasPendingVisibleUpdate ? this.pendingVisibleChunks.get(p_219219_1_) : ((ProtectedVisibleChunksMap)this.field_219252_f).safeGet(p_219219_1_));
         // Paper end
     }
 
@@ -742,7 +742,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
                 } else {
                     hasPendingVisibleUpdate = false;
                     this.pendingVisibleChunks.clear();
-                    ((net.minecraft.world.server.ChunkManager.ProtectedVisibleChunksMap)this.field_219252_f).copyFrom((com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder>)this.field_219251_e);
+                    ((ProtectedVisibleChunksMap)this.field_219252_f).copyFrom((com.destroystokyo.paper.util.map.Long2ObjectLinkedOpenHashMapFastCopy<ChunkHolder>)this.field_219251_e);
                     this.visibleChunksClone = null;
                 }
             }
