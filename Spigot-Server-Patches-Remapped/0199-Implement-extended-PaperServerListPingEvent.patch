From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Minecrell <minecrell@minecrell.net>
Date: Wed, 11 Oct 2017 15:56:26 +0200
Subject: [PATCH] Implement extended PaperServerListPingEvent


diff --git a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7cfd0cf43d33c7282f15341dfb4ccf3e971f37bf
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
@@ -0,0 +1,31 @@
+package com.destroystokyo.paper.network;
+
+import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
+import net.minecraft.entity.player.ServerPlayerEntity;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.entity.Player;
+import org.bukkit.util.CachedServerIcon;
+
+import javax.annotation.Nullable;
+
+class PaperServerListPingEventImpl extends PaperServerListPingEvent {
+
+    private final MinecraftServer server;
+
+    PaperServerListPingEventImpl(MinecraftServer server, StatusClient client, int protocolVersion, @Nullable CachedServerIcon icon) {
+        super(client, server.func_71273_Y(), server.func_71233_x(), server.func_71275_y(),
+                server.getServerModName() + ' ' + server.func_71249_w(), protocolVersion, icon);
+        this.server = server;
+    }
+
+    @Override
+    protected final Object[] getOnlinePlayers() {
+        return this.server.func_184103_al().field_72404_b.toArray();
+    }
+
+    @Override
+    protected final Player getBukkitPlayer(Object player) {
+        return ((ServerPlayerEntity) player).getBukkitEntity();
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java b/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java
new file mode 100644
index 0000000000000000000000000000000000000000..46e84ac6ba5d32d030267fb0c991c281a673c716
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/PaperStatusClient.java
@@ -0,0 +1,11 @@
+package com.destroystokyo.paper.network;
+
+import net.minecraft.network.NetworkManager;
+
+class PaperStatusClient extends PaperNetworkClient implements StatusClient {
+
+    PaperStatusClient(NetworkManager networkManager) {
+        super(networkManager);
+    }
+
+}
diff --git a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..ed956a1a9674746a21e6dbb844be7c84677be016
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
@@ -0,0 +1,112 @@
+package com.destroystokyo.paper.network;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.base.MoreObjects;
+import com.google.common.base.Strings;
+import com.mojang.authlib.GameProfile;
+import net.minecraft.network.NetworkManager;
+import net.minecraft.network.ServerStatusResponse;
+import net.minecraft.network.status.server.SServerInfoPacket;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+
+import java.util.List;
+import java.util.UUID;
+
+import javax.annotation.Nonnull;
+
+public final class StandardPaperServerListPingEventImpl extends PaperServerListPingEventImpl {
+
+    private static final GameProfile[] EMPTY_PROFILES = new GameProfile[0];
+    private static final UUID FAKE_UUID = new UUID(0, 0);
+
+    private GameProfile[] originalSample;
+
+    private StandardPaperServerListPingEventImpl(MinecraftServer server, NetworkManager networkManager, ServerStatusResponse ping) {
+        super(server, new PaperStatusClient(networkManager), ping.func_151322_c() != null ? ping.func_151322_c().func_151304_b() : -1, server.server.getServerIcon());
+        this.originalSample = ping.getPlayers() == null ? null : ping.getPlayers().getSample(); // GH-1473 - pre-tick race condition NPE
+    }
+
+    @Nonnull
+    @Override
+    public List<PlayerProfile> getPlayerSample() {
+        List<PlayerProfile> sample = super.getPlayerSample();
+
+        if (this.originalSample != null) {
+            for (GameProfile profile : this.originalSample) {
+                sample.add(CraftPlayerProfile.asBukkitCopy(profile));
+            }
+            this.originalSample = null;
+        }
+
+        return sample;
+    }
+
+    private GameProfile[] getPlayerSampleHandle() {
+        if (this.originalSample != null) {
+            return this.originalSample;
+        }
+
+        List<PlayerProfile> entries = super.getPlayerSample();
+        if (entries.isEmpty()) {
+            return EMPTY_PROFILES;
+        }
+
+        GameProfile[] profiles = new GameProfile[entries.size()];
+        for (int i = 0; i < profiles.length; i++) {
+            /*
+             * Avoid null UUIDs/names since that will make the response invalid
+             * on the client.
+             * Instead, fall back to a fake/empty UUID and an empty string as name.
+             * This can be used to create custom lines in the player list that do not
+             * refer to a specific player.
+             */
+
+            PlayerProfile profile = entries.get(i);
+            if (profile.getId() != null && profile.getName() != null) {
+                profiles[i] = CraftPlayerProfile.asAuthlib(profile);
+            } else {
+                profiles[i] = new GameProfile(MoreObjects.firstNonNull(profile.getId(), FAKE_UUID), Strings.nullToEmpty(profile.getName()));
+            }
+        }
+
+        return profiles;
+    }
+
+    @SuppressWarnings("deprecation")
+    public static void processRequest(MinecraftServer server, NetworkManager networkManager) {
+        StandardPaperServerListPingEventImpl event = new StandardPaperServerListPingEventImpl(server, networkManager, server.func_147134_at());
+        server.server.getPluginManager().callEvent(event);
+
+        // Close connection immediately if event is cancelled
+        if (event.isCancelled()) {
+            networkManager.func_150718_a(null);
+            return;
+        }
+
+        // Setup response
+        ServerStatusResponse ping = new ServerStatusResponse();
+
+        // Description
+        ping.func_151315_a(CraftChatMessage.fromString(event.getMotd(), true)[0]);
+
+        // Players
+        if (!event.shouldHidePlayers()) {
+            ping.func_151319_a(new ServerStatusResponse.Players(event.getMaxPlayers(), event.getNumPlayers()));
+            ping.getPlayers().setSample(event.getPlayerSampleHandle());
+        }
+
+        // Version
+        ping.func_151321_a(new ServerStatusResponse.Version(event.getVersion(), event.getProtocolVersion()));
+
+        // Favicon
+        if (event.getServerIcon() != null) {
+            ping.func_151320_a(event.getServerIcon().getData());
+        }
+
+        // Send response
+        networkManager.func_179290_a(new SServerInfoPacket(ping));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/ServerStatusResponse.java b/src/main/java/net/minecraft/network/ServerStatusResponse.java
index 0e47b02bbee10def23182d9d3de5e0bb4e2791ae..c51cf840c2681dee6b674379f446a34da72c9726 100644
--- a/src/main/java/net/minecraft/network/ServerStatusResponse.java
+++ b/src/main/java/net/minecraft/network/ServerStatusResponse.java
@@ -31,6 +31,7 @@ public class ServerStatusResponse {
         this.field_151326_a = p_151315_1_;
     }
 
+    public Players getPlayers() { return func_151318_b(); } // Paper - OBFHELPER
     public ServerStatusResponse.Players func_151318_b() {
         return this.field_151324_b;
     }
@@ -162,10 +163,12 @@ public class ServerStatusResponse {
             return this.field_151334_b;
         }
 
+        public GameProfile[] getSample() { return func_151331_c(); } // Paper - OBFHELPER
         public GameProfile[] func_151331_c() {
             return this.field_151335_c;
         }
 
+        public void setSample(GameProfile[] sample) { func_151330_a(sample); } // Paper - OBFHELPER
         public void func_151330_a(GameProfile[] p_151330_1_) {
             this.field_151335_c = p_151330_1_;
         }
diff --git a/src/main/java/net/minecraft/network/status/ServerStatusNetHandler.java b/src/main/java/net/minecraft/network/status/ServerStatusNetHandler.java
index fa4939fc1fa33ea0124fd46b208df671dd73abb8..3e2d03e31ef1aa19c112c28e6d7885736a8513e9 100644
--- a/src/main/java/net/minecraft/network/status/ServerStatusNetHandler.java
+++ b/src/main/java/net/minecraft/network/status/ServerStatusNetHandler.java
@@ -4,15 +4,11 @@ package net.minecraft.network.status;
 import com.mojang.authlib.GameProfile;
 import java.net.InetSocketAddress;
 import java.util.Iterator;
-import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.NetworkManager;
-import net.minecraft.network.ServerStatusResponse;
 import net.minecraft.network.status.client.CPingPacket;
 import net.minecraft.network.status.client.CServerQueryPacket;
 import net.minecraft.network.status.server.SPongPacket;
-import net.minecraft.network.status.server.SServerInfoPacket;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.SharedConstants;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
@@ -46,15 +42,17 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
             this.field_147313_b.func_150718_a(ServerStatusNetHandler.field_183007_a);
         } else {
             this.field_183008_d = true;
+            // Paper start - Replace everything
+            /*
             // CraftBukkit start
             // this.networkManager.sendPacket(new PacketStatusOutServerInfo(this.minecraftServer.getServerPing()));
-            final Object[] players = field_147314_a.func_184103_al().field_72404_b.toArray();
+            final Object[] players = minecraftServer.getPlayerList().players.toArray();
             class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent {
 
-                CraftIconCache icon = field_147314_a.server.getServerIcon();
+                CraftIconCache icon = minecraftServer.server.getServerIcon();
 
                 ServerListPingEvent() {
-                    super(((InetSocketAddress) field_147313_b.func_74430_c()).getAddress(), field_147314_a.func_71273_Y(), field_147314_a.func_184103_al().func_72352_l());
+                    super(((InetSocketAddress) networkManager.getSocketAddress()).getAddress(), minecraftServer.getMotd(), minecraftServer.getPlayerList().getMaxPlayers());
                 }
 
                 @Override
@@ -70,7 +68,7 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
                     return new Iterator<Player>() {
                         int i;
                         int ret = Integer.MIN_VALUE;
-                        ServerPlayerEntity player;
+                        EntityPlayer player;
 
                         @Override
                         public boolean hasNext() {
@@ -79,7 +77,7 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
                             }
                             final Object[] currentPlayers = players;
                             for (int length = currentPlayers.length, i = this.i; i < length; i++) {
-                                final ServerPlayerEntity player = (ServerPlayerEntity) currentPlayers[i];
+                                final EntityPlayer player = (EntityPlayer) currentPlayers[i];
                                 if (player != null) {
                                     this.i = i + 1;
                                     this.player = player;
@@ -94,7 +92,7 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
                             if (!hasNext()) {
                                 throw new java.util.NoSuchElementException();
                             }
-                            final ServerPlayerEntity player = this.player;
+                            final EntityPlayer player = this.player;
                             this.player = null;
                             this.ret = this.i - 1;
                             return player.getBukkitEntity();
@@ -114,16 +112,16 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
             }
 
             ServerListPingEvent event = new ServerListPingEvent();
-            this.field_147314_a.server.getPluginManager().callEvent(event);
+            this.minecraftServer.server.getPluginManager().callEvent(event);
 
             java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
             for (Object player : players) {
                 if (player != null) {
-                    profiles.add(((ServerPlayerEntity) player).func_146103_bH());
+                    profiles.add(((EntityPlayer) player).getProfile());
                 }
             }
 
-            ServerStatusResponse.Players playerSample = new ServerStatusResponse.Players(event.getMaxPlayers(), profiles.size());
+            ServerPing.ServerPingPlayerSample playerSample = new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size());
             // Spigot Start
             if ( !profiles.isEmpty() )
             {
@@ -131,16 +129,19 @@ public class ServerStatusNetHandler implements IServerStatusNetHandler {
                 profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
             }
             // Spigot End
-            playerSample.func_151330_a(profiles.toArray(new GameProfile[profiles.size()]));
-
-            ServerStatusResponse ping = new ServerStatusResponse();
-            ping.func_151320_a(event.icon.value);
-            ping.func_151315_a(CraftChatMessage.fromString(event.getMotd(), true)[0]);
-            ping.func_151319_a(playerSample);
-            int version = SharedConstants.func_215069_a().getProtocolVersion();
-            ping.func_151321_a(new ServerStatusResponse.Version(field_147314_a.getServerModName() + " " + field_147314_a.func_71249_w(), version));
-
-            this.field_147313_b.func_179290_a(new SServerInfoPacket(ping));
+            playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
+
+            ServerPing ping = new ServerPing();
+            ping.setFavicon(event.icon.value);
+            ping.setMOTD(CraftChatMessage.fromString(event.getMotd(), true)[0]);
+            ping.setPlayerSample(playerSample);
+            int version = SharedConstants.getGameVersion().getProtocolVersion();
+            ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), version));
+
+            this.networkManager.sendPacket(new PacketStatusOutServerInfo(ping));
+            */
+            com.destroystokyo.paper.network.StandardPaperServerListPingEventImpl.processRequest(this.field_147314_a, this.field_147313_b);
+            // Paper end
         }
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2f98ee5b71fd90f4d043ae89188ceaa0052c78b0..a6b769b44938a76cdb242727eb64bb3025a52067 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,6 +2,9 @@ package net.minecraft.server;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
+import co.aikar.timings.Timings;
+import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
+import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1227,7 +1230,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         if (i - this.field_147142_T >= 5000000000L) {
             this.field_147142_T = i;
             this.field_147147_p.func_151319_a(new ServerStatusResponse.Players(this.func_71275_y(), this.func_71233_x()));
-            GameProfile[] agameprofile = new GameProfile[Math.min(this.func_71233_x(), 12)];
+            GameProfile[] agameprofile = new GameProfile[Math.min(this.func_71233_x(), org.spigotmc.SpigotConfig.playerSample)]; // Paper
             int j = MathHelper.func_76136_a(this.field_147146_q, 0, this.func_71233_x() - agameprofile.length);
 
             for (int k = 0; k < agameprofile.length; ++k) {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 99a8296cd8e55c1fc5d656121fc4f67992defedc..032e7953f25bcb9a1f37c81eeca07411db416948 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -285,7 +285,7 @@ public class SpigotConfig
     public static int playerSample;
     private static void playerSample()
     {
-        playerSample = getInt( "settings.sample-count", 12 );
+        playerSample = Math.max( getInt( "settings.sample-count", 12 ), 0 ); // Paper - Avoid negative counts
         Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // Paper - Use logger
     }
 
