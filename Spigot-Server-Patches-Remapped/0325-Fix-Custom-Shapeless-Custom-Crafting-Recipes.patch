From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Fri, 18 Jan 2019 00:08:15 -0500
Subject: [PATCH] Fix Custom Shapeless Custom Crafting Recipes

Mojang implemented Shapeless different than Shaped

This made the Bukkit RecipeChoice API not work for Shapeless.

This reimplements vanilla logic using the same test logic as Shaped

diff --git a/src/main/java/net/minecraft/item/crafting/ShapelessRecipe.java b/src/main/java/net/minecraft/item/crafting/ShapelessRecipe.java
index c8aa0d4d556cd34ace28292d515536e5ad75dd54..b802ad337f2dd9000bfead1017ec95bad405dab3 100644
--- a/src/main/java/net/minecraft/item/crafting/ShapelessRecipe.java
+++ b/src/main/java/net/minecraft/item/crafting/ShapelessRecipe.java
@@ -70,16 +70,49 @@ public class ShapelessRecipe implements ICraftingRecipe {
         RecipeItemHelper autorecipestackmanager = new RecipeItemHelper();
         int i = 0;
 
+        // Paper start
+        java.util.List<ItemStack> providedItems = new java.util.ArrayList<>();
+        co.aikar.util.Counter<ItemStack> matchedProvided = new co.aikar.util.Counter<>();
+        co.aikar.util.Counter<Ingredient> matchedIngredients = new co.aikar.util.Counter<>();
+        // Paper end
         for (int j = 0; j < p_77569_1_.func_70302_i_(); ++j) {
             ItemStack itemstack = p_77569_1_.func_70301_a(j);
 
             if (!itemstack.func_190926_b()) {
-                ++i;
-                autorecipestackmanager.func_221264_a(itemstack, 1);
+                // Paper start
+                itemstack = itemstack.func_77946_l();
+                providedItems.add(itemstack);
+                for (Ingredient ingredient : field_77579_b) {
+                    if (ingredient.test(itemstack)) {
+                        matchedProvided.increment(itemstack);
+                        matchedIngredients.increment(ingredient);
+                    }
+                }
+                // Paper end
             }
         }
 
-        return i == this.field_77579_b.size() && autorecipestackmanager.func_194116_a(this, (IntList) null);
+        // Paper start
+        if (matchedProvided.isEmpty() || matchedIngredients.isEmpty()) {
+            return false;
+        }
+        java.util.List<Ingredient> ingredients = new java.util.ArrayList<>(this.field_77579_b);
+        providedItems.sort(java.util.Comparator.comparingInt((ItemStack c) -> (int) matchedProvided.getCount(c)).reversed());
+        ingredients.sort(java.util.Comparator.comparingInt((Ingredient c) -> (int) matchedIngredients.getCount(c)));
+
+        PROVIDED:
+        for (ItemStack provided : providedItems) {
+            for (Iterator<Ingredient> itIngredient = ingredients.iterator(); itIngredient.hasNext(); ) {
+                Ingredient ingredient = itIngredient.next();
+                if (ingredient.test(provided)) {
+                    itIngredient.remove();
+                    continue PROVIDED;
+                }
+            }
+            return false;
+        }
+        return ingredients.isEmpty();
+        // Paper end
     }
 
     public ItemStack func_77572_b(CraftingInventory p_77572_1_) {
