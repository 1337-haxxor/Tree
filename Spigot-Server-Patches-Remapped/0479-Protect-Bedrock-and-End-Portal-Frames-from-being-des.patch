From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 13 May 2020 23:01:26 -0400
Subject: [PATCH] Protect Bedrock and End Portal/Frames from being destroyed

This fixes exploits that let players destroy bedrock by Pistons, explosions
and Mushrooom/Tree generation.

These blocks are designed to not be broken except by creative players/commands.
So protect them from a multitude of methods of destroying them.

A config is provided if you rather let players use these exploits, and let
them destroy the worlds End Portals and get on top of the nether easy.

diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 6f0c5a2d33001f59e560ec239c0edbd32de84ed8..ac6b291c103c432fdced603674345096326a9efe 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -411,4 +411,17 @@ public class PaperConfig {
     private static void midTickChunkTasks() {
         midTickChunkTasks = getInt("settings.chunk-tasks-per-tick", midTickChunkTasks);
     }
+
+    public static boolean allowBlockPermanentBreakingExploits = false;
+    private static void allowBlockPermanentBreakingExploits() {
+        if (config.contains("allow-perm-block-break-exploits")) {
+            allowBlockPermanentBreakingExploits = config.getBoolean("allow-perm-block-break-exploits", false);
+            config.set("allow-perm-block-break-exploits", null);
+        }
+
+        config.set("settings.unsupported-settings.allow-permanent-block-break-exploits-readme", "This setting controls if players should be able to break bedrock, end portals and other intended to be permanent blocks.");
+        allowBlockPermanentBreakingExploits = getBoolean("settings.unsupported-settings.allow-permanent-block-break-exploits", allowBlockPermanentBreakingExploits);
+
+    }
+
 }
diff --git a/src/main/java/net/minecraft/block/AbstractBlock.java b/src/main/java/net/minecraft/block/AbstractBlock.java
index f548155f605c6bb30684d947e51baeb95b3012ae..156f1c421fc44da996c243503b97f2421a65129b 100644
--- a/src/main/java/net/minecraft/block/AbstractBlock.java
+++ b/src/main/java/net/minecraft/block/AbstractBlock.java
@@ -186,7 +186,7 @@ public abstract class AbstractBlock {
 
     @Deprecated
     public boolean func_196253_a(BlockState p_196253_1_, BlockItemUseContext p_196253_2_) {
-        return this.field_149764_J.func_76222_j() && (p_196253_2_.func_195996_i().func_190926_b() || p_196253_2_.func_195996_i().func_77973_b() != this.func_199767_j());
+        return this.field_149764_J.func_76222_j() && (p_196253_2_.func_195996_i().func_190926_b() || p_196253_2_.func_195996_i().func_77973_b() != this.func_199767_j()) && (p_196253_1_.isDestroyable() || (p_196253_2_.func_195999_j() != null && p_196253_2_.func_195999_j().field_71075_bZ.field_75098_d)); // Paper
     }
 
     @Deprecated
@@ -390,7 +390,11 @@ public abstract class AbstractBlock {
         public Block func_177230_c() {
             return (Block) this.field_235892_c_;
         }
-
+        // Paper start
+        public final boolean isDestroyable() {
+            return func_177230_c().isDestroyable();
+        }
+        // Paper end
         public Material func_185904_a() {
             return this.field_235703_g_;
         }
@@ -480,7 +484,7 @@ public abstract class AbstractBlock {
         }
 
         public PushReaction func_185905_o() {
-            return this.func_177230_c().func_149656_h(this.func_230340_p_());
+            return !isDestroyable() ? PushReaction.BLOCK : this.func_177230_c().func_149656_h(this.func_230340_p_()); // Paper
         }
 
         public boolean func_200015_d(IBlockReader p_200015_1_, BlockPos p_200015_2_) {
diff --git a/src/main/java/net/minecraft/block/Block.java b/src/main/java/net/minecraft/block/Block.java
index 3363c9a643813272160c652caedc22b05b2c395d..9372d68a2a71243a5cf084921aa47d21c2834ebd 100644
--- a/src/main/java/net/minecraft/block/Block.java
+++ b/src/main/java/net/minecraft/block/Block.java
@@ -62,6 +62,19 @@ public class Block extends AbstractBlock implements IItemProvider {
     protected final StateContainer<Block, BlockState> field_176227_L;
     private BlockState field_196275_y;
     // Paper start
+    public final boolean isDestroyable() {
+        return com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits ||
+            this != Blocks.field_150357_h &&
+            this != Blocks.field_150378_br &&
+            this != Blocks.field_150384_bq &&
+            this != Blocks.field_185775_db &&
+            this != Blocks.field_150483_bI &&
+            this != Blocks.field_185776_dc &&
+            this != Blocks.field_185777_dd &&
+            this != Blocks.field_180401_cv &&
+            this != Blocks.field_185779_df &&
+            this != Blocks.field_226904_lY_;
+    }
     public co.aikar.timings.Timing timing;
     public co.aikar.timings.Timing getTiming() {
         if (timing == null) {
diff --git a/src/main/java/net/minecraft/block/PistonBlock.java b/src/main/java/net/minecraft/block/PistonBlock.java
index b26cc832c0e95174455fc7606d0966b71bbe0cb7..58e58d46760eac899cb167a40934eab0c4d6f8a6 100644
--- a/src/main/java/net/minecraft/block/PistonBlock.java
+++ b/src/main/java/net/minecraft/block/PistonBlock.java
@@ -189,6 +189,12 @@ public class PistonBlock extends DirectionalBlock {
     @Override
     public boolean func_189539_a(BlockState p_189539_1_, World p_189539_2_, BlockPos p_189539_3_, int p_189539_4_, int p_189539_5_) {
         Direction enumdirection = (Direction) p_189539_1_.func_177229_b(PistonBlock.field_176387_N);
+        // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
+        Direction directionQueuedAs = Direction.func_82600_a(p_189539_5_ & 7); // Paper - copied from below
+        if (!com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits && enumdirection != directionQueuedAs) {
+            return false;
+        }
+        // Paper end - prevent retracting when we're facing the wrong way
 
         if (!p_189539_2_.field_72995_K) {
             boolean flag = this.func_176318_b(p_189539_2_, p_189539_3_, enumdirection);
@@ -220,7 +226,7 @@ public class PistonBlock extends DirectionalBlock {
             BlockState iblockdata1 = (BlockState) ((BlockState) Blocks.field_196603_bb.func_176223_P().func_206870_a(MovingPistonBlock.field_196344_a, enumdirection)).func_206870_a(MovingPistonBlock.field_196345_b, this.field_150082_a ? PistonType.STICKY : PistonType.DEFAULT);
 
             p_189539_2_.func_180501_a(p_189539_3_, iblockdata1, 20);
-            p_189539_2_.func_175690_a(p_189539_3_, MovingPistonBlock.func_196343_a((BlockState) this.func_176223_P().func_206870_a(PistonBlock.field_176387_N, Direction.func_82600_a(p_189539_5_ & 7)), enumdirection, false, true));
+            p_189539_2_.func_175690_a(p_189539_3_, MovingPistonBlock.func_196343_a((BlockState) this.func_176223_P().func_206870_a(PistonBlock.field_176387_N, Direction.func_82600_a(p_189539_5_ & 7)), enumdirection, false, true)); // Paper - diff on change, j is facing direction - copy this above
             p_189539_2_.func_230547_a_(p_189539_3_, iblockdata1.func_177230_c());
             iblockdata1.func_235734_a_(p_189539_2_, p_189539_3_, 2);
             if (this.field_150082_a) {
@@ -249,7 +255,14 @@ public class PistonBlock extends DirectionalBlock {
                     }
                 }
             } else {
-                p_189539_2_.func_217377_a(p_189539_3_.func_177972_a(enumdirection), false);
+                // Paper start - fix headless pistons breaking blocks
+                BlockPos headPos = p_189539_3_.func_177972_a(enumdirection);
+                if (com.destroystokyo.paper.PaperConfig.allowBlockPermanentBreakingExploits || p_189539_2_.func_180495_p(headPos) == Blocks.field_150332_K.func_176223_P().func_206870_a(field_176387_N, enumdirection)) { // double check to make sure we're not a headless piston.
+                    p_189539_2_.setAir(headPos, false);
+                } else {
+                    ((ServerWorld)p_189539_2_).func_72863_F().func_217217_a(headPos); // ... fix client desync
+                }
+                // Paper end - fix headless pistons breaking blocks
             }
 
             p_189539_2_.func_184133_a((PlayerEntity) null, p_189539_3_, SoundEvents.field_187712_dQ, SoundCategory.BLOCKS, 0.5F, p_189539_2_.field_73012_v.nextFloat() * 0.15F + 0.6F);
diff --git a/src/main/java/net/minecraft/world/Explosion.java b/src/main/java/net/minecraft/world/Explosion.java
index d7968f119423aa1b82f1764b1f022587d4b2dd06..7b540e71847eb951e7a69864a79017910280e121 100644
--- a/src/main/java/net/minecraft/world/Explosion.java
+++ b/src/main/java/net/minecraft/world/Explosion.java
@@ -153,6 +153,7 @@ public class Explosion {
                         for (float f1 = 0.3F; f > 0.0F; f -= 0.22500001F) {
                             BlockPos blockposition = new BlockPos(d4, d5, d6);
                             BlockState iblockdata = this.field_77287_j.func_180495_p(blockposition);
+                            if (!iblockdata.isDestroyable()) continue; // Paper
                             FluidState fluid = iblockdata.func_204520_s(); // Paper
                             Optional<Float> optional = this.field_234893_k_.func_230312_a_(this, this.field_77287_j, blockposition, iblockdata, fluid);
 
@@ -306,7 +307,7 @@ public class Explosion {
                 BlockState iblockdata = this.field_77287_j.func_180495_p(blockposition);
                 Block block = iblockdata.func_177230_c();
 
-                if (!iblockdata.func_196958_f()) {
+                if (!iblockdata.func_196958_f() && iblockdata.isDestroyable()) { // Paper
                     BlockPos blockposition1 = blockposition.func_185334_h();
 
                     this.field_77287_j.func_217381_Z().func_76320_a("explosion_blocks");
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index d698e49b9744e13c5d622ab272a1bcf73d0fc2e9..d5725f2747ae76c821211efd3d4c89a4ca87defe 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -421,6 +421,10 @@ public abstract class World implements IWorld, AutoCloseable {
     public boolean func_241211_a_(BlockPos p_241211_1_, BlockState p_241211_2_, int p_241211_3_, int p_241211_4_) {
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
+            // Paper start
+            BlockState type = func_180495_p(p_241211_1_);
+            if (!type.isDestroyable()) return false;
+            // Paper end
             CraftBlockState blockstate = capturedBlockStates.get(p_241211_1_);
             if (blockstate == null) {
                 blockstate = CapturedBlockState.getTreeBlockState(this, p_241211_1_, p_241211_3_);
