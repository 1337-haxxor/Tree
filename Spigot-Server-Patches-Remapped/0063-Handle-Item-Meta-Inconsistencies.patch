From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 28 May 2015 23:00:19 -0400
Subject: [PATCH] Handle Item Meta Inconsistencies

First, Enchantment order would blow away seeing 2 items as the same,
however the Client forces enchantment list in a certain order, as well
as does the /enchant command. Anvils can insert it into forced order,
causing 2 same items to be considered different.

This change makes unhandled NBT Tags and Enchantments use a sorted tree map,
so they will always be in a consistent order.

Additionally, the old enchantment API was never updated when ItemMeta
was added, resulting in 2 different ways to modify an items enchantments.

For consistency, the old API methods now forward to use the
ItemMeta API equivalents, and should deprecate the old API's.

diff --git a/src/main/java/net/minecraft/item/ItemStack.java b/src/main/java/net/minecraft/item/ItemStack.java
index 7a7ca5452d61f5920b7fcac06fee5e6c3524f7e7..baf675c592f08f444bb2330e5b9394c36f1f048a 100644
--- a/src/main/java/net/minecraft/item/ItemStack.java
+++ b/src/main/java/net/minecraft/item/ItemStack.java
@@ -9,6 +9,8 @@ import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.Locale;
 import java.util.Objects;
 import java.util.Optional;
@@ -119,6 +121,23 @@ public final class ItemStack {
     private CachedBlockInfo field_179550_j;
     private boolean field_179551_k;
 
+    // Paper start
+    private static final java.util.Comparator<? super CompoundNBT> enchantSorter = java.util.Comparator.comparing(o -> o.func_74779_i("id"));
+    private void processEnchantOrder(CompoundNBT tag) {
+        if (tag == null || !tag.func_150297_b("Enchantments", 9)) {
+            return;
+        }
+        ListNBT list = tag.func_150295_c("Enchantments", 10);
+        if (list.size() < 2) {
+            return;
+        }
+        try {
+            //noinspection unchecked
+            list.sort((Comparator<? super INBT>) enchantSorter); // Paper
+        } catch (Exception ignored) {}
+    }
+    // Paper end
+
     public ItemStack(IItemProvider imaterial) {
         this(imaterial, 1);
     }
@@ -161,6 +180,7 @@ public final class ItemStack {
         if (nbttagcompound.func_150297_b("tag", 10)) {
             // CraftBukkit start - make defensive copy as this data may be coming from the save thread
             this.field_77990_d = (CompoundNBT) nbttagcompound.func_74775_l("tag").func_74737_b();
+            processEnchantOrder(this.field_77990_d); // Paper
             this.func_77973_b().func_179215_a(this.field_77990_d);
             // CraftBukkit end
         }
@@ -679,6 +699,7 @@ public final class ItemStack {
     // Paper end
     public void func_77982_d(@Nullable CompoundNBT p_77982_1_) {
         this.field_77990_d = p_77982_1_;
+        processEnchantOrder(this.field_77990_d); // Paper
         if (this.func_77973_b().func_77645_m()) {
             this.func_196085_b(this.func_77952_i());
         }
@@ -763,6 +784,7 @@ public final class ItemStack {
         nbttagcompound.func_74778_a("id", String.valueOf(Registry.field_212628_q.func_177774_c(p_77966_1_)));
         nbttagcompound.func_74777_a("lvl", (short) ((byte) p_77966_2_));
         nbttaglist.add(nbttagcompound);
+        processEnchantOrder(nbttagcompound); // Paper
     }
 
     public boolean func_77948_v() {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index bac338570832a1c79966bf1eb0775db1f38d32ad..25bd00cc2f01bcd3939dabb004f6ac837749ba1f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.inventory;
 import static org.bukkit.craftbukkit.inventory.CraftMetaItem.*;
 import com.google.common.collect.ImmutableMap;
 import java.util.Map;
-import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.item.Item;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.nbt.ListNBT;
@@ -178,28 +177,11 @@ public final class CraftItemStack extends ItemStack {
     public void addUnsafeEnchantment(Enchantment ench, int level) {
         Validate.notNull(ench, "Cannot add null enchantment");
 
-        if (!makeTag(handle)) {
-            return;
-        }
-        ListNBT list = getEnchantmentList(handle);
-        if (list == null) {
-            list = new ListNBT();
-            handle.func_77978_p().func_218657_a(ENCHANTMENTS.NBT, list);
-        }
-        int size = list.size();
-
-        for (int i = 0; i < size; i++) {
-            CompoundNBT tag = (CompoundNBT) list.get(i);
-            String id = tag.func_74779_i(ENCHANTMENTS_ID.NBT);
-            if (id.equals(ench.getKey().toString())) {
-                tag.func_74777_a(ENCHANTMENTS_LVL.NBT, (short) level);
-                return;
-            }
-        }
-        CompoundNBT tag = new CompoundNBT();
-        tag.func_74778_a(ENCHANTMENTS_ID.NBT, ench.getKey().toString());
-        tag.func_74777_a(ENCHANTMENTS_LVL.NBT, (short) level);
-        list.add(tag);
+        // Paper start - Replace whole method
+        final ItemMeta itemMeta = getItemMeta();
+        itemMeta.addEnchant(ench, level, true);
+        setItemMeta(itemMeta);
+        // Paper end
     }
 
     static boolean makeTag(net.minecraft.item.ItemStack item) {
@@ -216,66 +198,33 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public boolean containsEnchantment(Enchantment ench) {
-        return getEnchantmentLevel(ench) > 0;
+        return hasItemMeta() && getItemMeta().hasEnchant(ench); // Paper - use meta
     }
 
     @Override
     public int getEnchantmentLevel(Enchantment ench) {
-        Validate.notNull(ench, "Cannot find null enchantment");
-        if (handle == null) {
-            return 0;
-        }
-        return EnchantmentHelper.func_77506_a(CraftEnchantment.getRaw(ench), handle);
+        return hasItemMeta() ? getItemMeta().getEnchantLevel(ench) : 0; // Paper - replace entire method with meta
     }
 
     @Override
     public int removeEnchantment(Enchantment ench) {
         Validate.notNull(ench, "Cannot remove null enchantment");
 
-        ListNBT list = getEnchantmentList(handle), listCopy;
-        if (list == null) {
-            return 0;
-        }
-        int index = Integer.MIN_VALUE;
-        int level = Integer.MIN_VALUE;
-        int size = list.size();
-
-        for (int i = 0; i < size; i++) {
-            CompoundNBT enchantment = (CompoundNBT) list.get(i);
-            String id = enchantment.func_74779_i(ENCHANTMENTS_ID.NBT);
-            if (id.equals(ench.getKey().toString())) {
-                index = i;
-                level = 0xffff & enchantment.func_74765_d(ENCHANTMENTS_LVL.NBT);
-                break;
-            }
-        }
-
-        if (index == Integer.MIN_VALUE) {
-            return 0;
-        }
-        if (size == 1) {
-            handle.func_77978_p().func_82580_o(ENCHANTMENTS.NBT);
-            if (handle.func_77978_p().isEmpty()) {
-                handle.func_77982_d(null);
-            }
-            return level;
-        }
-
-        // This is workaround for not having an index removal
-        listCopy = new ListNBT();
-        for (int i = 0; i < size; i++) {
-            if (i != index) {
-                listCopy.add(list.get(i));
-            }
+        // Paper start - replace entire method
+        final ItemMeta itemMeta = getItemMeta();
+        int level = itemMeta.getEnchantLevel(ench);
+        if (level > 0) {
+            itemMeta.removeEnchant(ench);
+            setItemMeta(itemMeta);
         }
-        handle.func_77978_p().func_218657_a(ENCHANTMENTS.NBT, listCopy);
+        // Paper end
 
         return level;
     }
 
     @Override
     public Map<Enchantment, Integer> getEnchantments() {
-        return getEnchantments(handle);
+        return hasItemMeta() ? getItemMeta().getEnchants() : ImmutableMap.<Enchantment, Integer>of(); // Paper - use Item Meta
     }
 
     static Map<Enchantment, Integer> getEnchantments(net.minecraft.item.ItemStack item) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index d066cec587d03a01e17a71c936cd6d033de4b761..9ec9231b1a095a713f404798727e6a8543908481 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -6,6 +6,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.ImmutableSortedMap; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
@@ -23,6 +24,7 @@ import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Comparator; // Paper
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -32,6 +34,7 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
+import java.util.TreeMap; // Paper
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nonnull;
@@ -271,7 +274,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     private List<ITextComponent> lore;
     private Integer customModelData;
     private CompoundNBT blockData;
-    private Map<Enchantment, Integer> enchantments;
+    private EnchantmentMap enchantments; // Paper
     private Multimap<Attribute, AttributeModifier> attributeModifiers;
     private int repairCost;
     private int hideFlag;
@@ -282,7 +285,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
 
     private CompoundNBT internalTag;
-    private final Map<String, INBT> unhandledTags = new HashMap<String, INBT>();
+    private final Map<String, INBT> unhandledTags = new TreeMap<>(); // Paper
     private CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
 
     private int version = CraftMagicNumbers.INSTANCE.getDataVersion(); // Internal use only
@@ -303,7 +306,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.blockData = meta.blockData;
 
         if (meta.enchantments != null) { // Spigot
-            this.enchantments = new LinkedHashMap<Enchantment, Integer>(meta.enchantments);
+            this.enchantments = new EnchantmentMap(meta.enchantments); // Paper
         }
 
         if (meta.hasAttributeModifiers()) {
@@ -399,13 +402,13 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    static Map<Enchantment, Integer> buildEnchantments(CompoundNBT tag, ItemMetaKey key) {
+    static EnchantmentMap buildEnchantments(CompoundNBT tag, ItemMetaKey key) { // Paper
         if (!tag.func_74764_b(key.NBT)) {
             return null;
         }
 
         ListNBT ench = tag.func_150295_c(key.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
-        Map<Enchantment, Integer> enchantments = new LinkedHashMap<Enchantment, Integer>(ench.size());
+        EnchantmentMap enchantments = new EnchantmentMap(); // Paper
 
         for (int i = 0; i < ench.size(); i++) {
             String id = ((CompoundNBT) ench.get(i)).func_74779_i(ENCHANTMENTS_ID.NBT);
@@ -557,13 +560,13 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    static Map<Enchantment, Integer> buildEnchantments(Map<String, Object> map, ItemMetaKey key) {
+    static EnchantmentMap buildEnchantments(Map<String, Object> map, ItemMetaKey key) { // Paper
         Map<?, ?> ench = SerializableMeta.getObject(Map.class, map, key.BUKKIT, true);
         if (ench == null) {
             return null;
         }
 
-        Map<Enchantment, Integer> enchantments = new LinkedHashMap<Enchantment, Integer>(ench.size());
+        EnchantmentMap enchantments = new EnchantmentMap(); // Paper
         for (Map.Entry<?, ?> entry : ench.entrySet()) {
             // Doctor older enchants
             String enchantKey = entry.getKey().toString();
@@ -815,14 +818,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Override
     public Map<Enchantment, Integer> getEnchants() {
-        return hasEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.<Enchantment, Integer>of();
+        return hasEnchants() ? ImmutableSortedMap.copyOfSorted(enchantments) : ImmutableMap.<Enchantment, Integer>of(); // Paper
     }
 
     @Override
     public boolean addEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
         Validate.notNull(ench, "Enchantment cannot be null");
         if (enchantments == null) {
-            enchantments = new LinkedHashMap<Enchantment, Integer>(4);
+            enchantments = new EnchantmentMap(); // Paper
         }
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
@@ -1203,7 +1206,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             clone.customModelData = this.customModelData;
             clone.blockData = this.blockData;
             if (this.enchantments != null) {
-                clone.enchantments = new LinkedHashMap<Enchantment, Integer>(this.enchantments);
+                clone.enchantments = new EnchantmentMap(this.enchantments); // Paper
             }
             if (this.hasAttributeModifiers()) {
                 clone.attributeModifiers = LinkedHashMultimap.create(this.attributeModifiers);
@@ -1435,4 +1438,22 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
             return HANDLED_TAGS;
         }
     }
+
+    // Paper start
+    private static class EnchantmentMap extends TreeMap<Enchantment, Integer> {
+        private EnchantmentMap(Map<Enchantment, Integer> enchantments) {
+            this();
+            putAll(enchantments);
+        }
+
+        private EnchantmentMap() {
+            super(Comparator.comparing(o -> o.getKey().toString()));
+        }
+
+        public EnchantmentMap clone() {
+            return (EnchantmentMap) super.clone();
+        }
+    }
+    // Paper end
+
 }
