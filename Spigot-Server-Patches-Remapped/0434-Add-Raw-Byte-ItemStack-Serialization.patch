From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Thu, 30 Apr 2020 16:56:54 +0200
Subject: [PATCH] Add Raw Byte ItemStack Serialization

Serializes using NBT which is safer for server data migrations than bukkits format.

diff --git a/src/main/java/net/minecraft/item/ItemStack.java b/src/main/java/net/minecraft/item/ItemStack.java
index 981bd79f9052bf94706d6f07d0ab1c6238df1ab7..c1e197c79956d9f59914282cbc7c9c0e8da697d9 100644
--- a/src/main/java/net/minecraft/item/ItemStack.java
+++ b/src/main/java/net/minecraft/item/ItemStack.java
@@ -197,6 +197,7 @@ public final class ItemStack {
         this.func_190923_F();
     }
 
+    public static ItemStack fromCompound(CompoundNBT nbttagcompound) { return func_199557_a(nbttagcompound); } // Paper - OBFHELPER
     public static ItemStack func_199557_a(CompoundNBT p_199557_0_) {
         try {
             return new ItemStack(p_199557_0_);
diff --git a/src/main/java/net/minecraft/nbt/CompressedStreamTools.java b/src/main/java/net/minecraft/nbt/CompressedStreamTools.java
index 41baf07c393ff9cb4e0368609d7dfcf549b5455a..f2d52025444c2fd61d36201df8c613abce6a3b9f 100644
--- a/src/main/java/net/minecraft/nbt/CompressedStreamTools.java
+++ b/src/main/java/net/minecraft/nbt/CompressedStreamTools.java
@@ -50,6 +50,7 @@ public class CompressedStreamTools {
         return nbttagcompound;
     }
 
+    public static CompoundNBT readNBT(InputStream inputstream) throws IOException { return func_74796_a(inputstream); } // Paper - OBFHELPER
     public static CompoundNBT func_74796_a(InputStream p_74796_0_) throws IOException {
         DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(p_74796_0_)));
         Throwable throwable = null;
@@ -105,6 +106,7 @@ public class CompressedStreamTools {
 
     }
 
+    public static void writeNBT(CompoundNBT nbttagcompound, OutputStream outputstream) throws IOException { func_74799_a(nbttagcompound, outputstream); } // Paper - OBFHELPER
     public static void func_74799_a(CompoundNBT p_74799_0_, OutputStream p_74799_1_) throws IOException {
         DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(p_74799_1_)));
         Throwable throwable = null;
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixesManager.java b/src/main/java/net/minecraft/util/datafix/DataFixesManager.java
index a0a3e0aafeafcb07c2392f192030f80ea57830ee..95f42c15bbd0e0a5b4c87847253dd0eb9d8811a7 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixesManager.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixesManager.java
@@ -77,6 +77,7 @@ public class DataFixesManager {
         return datafixerbuilder.build(Util.func_240991_e_());
     }
 
+    public static DataFixer getDataFixer() { return func_210901_a(); } // Paper - OBFHELPER
     public static DataFixer func_210901_a() {
         return DataFixesManager.field_210902_d;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index c3d7165e55cf267d30769c7dbf0fae54017b9fa6..35f3718177ae3f2f1c6e7fa0cf281a24f1c9b110 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -351,6 +351,46 @@ public final class CraftMagicNumbers implements UnsafeValues {
     public boolean isSupportedApiVersion(String apiVersion) {
         return apiVersion != null && SUPPORTED_API.contains(apiVersion);
     }
+
+    @Override
+    public byte[] serializeItem(ItemStack item) {
+        Preconditions.checkNotNull(item, "null cannot be serialized");
+        Preconditions.checkArgument(item.getType() != Material.AIR, "air cannot be serialized");
+
+        java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
+        CompoundNBT compound = (item instanceof CraftItemStack ? ((CraftItemStack) item).getHandle() : CraftItemStack.asNMSCopy(item)).func_77955_b(new CompoundNBT());
+        compound.func_74768_a("DataVersion", getDataVersion());
+        try {
+            net.minecraft.nbt.CompressedStreamTools.writeNBT(
+                compound,
+                outputStream
+            );
+        } catch (IOException ex) {
+            throw new RuntimeException(ex);
+        }
+
+        return outputStream.toByteArray();
+    }
+
+    @Override
+    public ItemStack deserializeItem(byte[] data) {
+        Preconditions.checkNotNull(data, "null cannot be deserialized");
+        Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
+
+        try {
+            CompoundNBT compound = net.minecraft.nbt.CompressedStreamTools.readNBT(
+                new java.io.ByteArrayInputStream(data)
+            );
+            int dataVersion = compound.func_74762_e("DataVersion");
+
+            Preconditions.checkArgument(dataVersion <= getDataVersion(), "Newer version! Server downgrades are not supported!");
+            Dynamic<INBT> converted = DataFixesManager.getDataFixer().update(TypeReferences.field_211295_k, new Dynamic<INBT>(NBTDynamicOps.field_210820_a, compound), dataVersion, getDataVersion());
+            return CraftItemStack.asCraftMirror(net.minecraft.item.ItemStack.fromCompound((CompoundNBT) converted.getValue()));
+        } catch (IOException ex) {
+            com.destroystokyo.paper.util.SneakyThrow.sneaky(ex);
+            throw new RuntimeException();
+        }
+    }
     // Paper end
 
     /**
