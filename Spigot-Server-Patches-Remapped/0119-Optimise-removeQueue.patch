From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alfie Cleveland <alfeh@me.com>
Date: Fri, 25 Nov 2016 13:22:40 +0000
Subject: [PATCH] Optimise removeQueue


diff --git a/src/main/java/net/minecraft/network/login/ServerLoginNetHandler.java b/src/main/java/net/minecraft/network/login/ServerLoginNetHandler.java
index f1f2b99357db4d57bb0d4883fc3b0d9134911fbc..3cd1ba47a9a948291af69570a1c82e908a3118f1 100644
--- a/src/main/java/net/minecraft/network/login/ServerLoginNetHandler.java
+++ b/src/main/java/net/minecraft/network/login/ServerLoginNetHandler.java
@@ -27,7 +27,6 @@ import net.minecraft.network.login.server.SLoginSuccessPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.CryptManager;
-import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
@@ -114,6 +113,12 @@ public class ServerLoginNetHandler implements IServerLoginNetHandler {
 
     }
 
+    // Paper start - Cache authenticator threads
+    private static final AtomicInteger threadId = new AtomicInteger(0);
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+            r -> new Thread(r, "User Authenticator #" + threadId.incrementAndGet())
+    );
+    // Paper end
     // Spigot start
     public void initUUID()
     {
@@ -192,8 +197,8 @@ public class ServerLoginNetHandler implements IServerLoginNetHandler {
             this.field_147333_a.func_179290_a(new SEncryptionRequestPacket("", this.field_147327_f.func_71250_E().getPublic().getEncoded(), this.field_147330_e));
         } else {
             // Spigot start
-            new Thread("User Authenticator #" + ServerLoginNetHandler.field_147331_b.incrementAndGet()) {
-
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -204,7 +209,8 @@ public class ServerLoginNetHandler implements IServerLoginNetHandler {
                         field_147327_f.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + field_147337_i.getName(), ex);
                     }
                 }
-            }.start();
+            });
+            // Paper end
             // Spigot end
         }
 
@@ -233,7 +239,8 @@ public class ServerLoginNetHandler implements IServerLoginNetHandler {
             throw new IllegalStateException("Protocol error", cryptographyexception);
         }
 
-        Thread thread = new Thread("User Authenticator #" + ServerLoginNetHandler.field_147331_b.incrementAndGet()) {
+        // Paper start - Cache authenticator threads
+        authenticatorPool.execute(new Runnable() {
             public void run() {
                 GameProfile gameprofile = ServerLoginNetHandler.this.field_147337_i;
 
@@ -278,10 +285,8 @@ public class ServerLoginNetHandler implements IServerLoginNetHandler {
 
                 return ServerLoginNetHandler.this.field_147327_f.func_190518_ac() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
             }
-        };
-
-        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(ServerLoginNetHandler.field_147332_c));
-        thread.start();
+        });
+        // Paper end
     }
 
     // Spigot start
