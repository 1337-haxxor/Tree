From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach.brown@destroystokyo.com>
Date: Fri, 12 May 2017 23:34:11 -0500
Subject: [PATCH] Properly handle async calls to restart the server

The watchdog thread calls the server restart function asynchronously. Prior to
this change, it attempted to do several non-safe operations from the watchdog
thread, rather than the main. Specifically, because of a separate upstream change,
it causes player entities to be ticked asynchronously, among other things.

This is dangerous.

This patch moves the old handling into a synchronous variant, for calls from the
restart command, and adds separate handling for async calls, such as those from
the watchdog thread.

When calling from the watchdog thread, we cannot assume the main thread is in a
tickable state; it may be completely deadlocked. In order to handle this, we mark
the server as stopping, in order to account for situations where the server should
complete a tick reasonbly soon, i.e. 99% of cases.

Should the server not enter a state where it is stopping within 10 seconds, We
will assume that the server has in fact deadlocked and will proceed to force
kill the server.

This modification does not force restart the server should we actually enter a
deadlocked state where the server is stopping, whereas this will in most cases
exit within a reasonable amount of time, to put a fixed limit on a process that
will have plugins and worlds saving to the disk has a high potential to result
in corruption/dataloss.

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 48958cc1f4e2af0b099e1f9cb1bca1276e3decc1..cc8ac899b91b6be3c53b8ac55a6cc35243f35ec2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -200,6 +200,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
     public final Map<RegistryKey<World>, ServerWorld> field_71305_c;
     private PlayerList field_71318_t;
     private volatile boolean field_71317_u;
+    private volatile boolean isRestarting = false; // Paper - flag to signify we're attempting to restart
     private boolean field_71316_v;
     private int field_71315_w;
     protected final Proxy field_110456_c;
@@ -849,7 +850,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         if (this.field_71318_t != null) {
             MinecraftServer.field_147145_h.info("Saving players");
             this.field_71318_t.func_72389_g();
-            this.field_71318_t.func_72392_r();
+            this.field_71318_t.shutdown(this.isRestarting); // Paper
             try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
@@ -914,9 +915,14 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         return this.field_71317_u;
     }
 
+    // Paper start - allow passing of the intent to restart
     public void func_71263_m(boolean p_71263_1_) {
+        this.safeShutdown(p_71263_1_, false);
+    }
+    public void safeShutdown(boolean flag, boolean isRestarting) {
         this.field_71317_u = false;
-        if (p_71263_1_) {
+        this.isRestarting = isRestarting;
+        if (flag) {
             try {
                 this.field_175590_aa.join();
             } catch (InterruptedException interruptedexception) {
@@ -925,6 +931,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         }
 
     }
+    // Paper end
 
     // Spigot Start
     private static double calcTps(double avg, double exp, double tps)
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index 9d15b6127792f27fc7aadbd9c57f5460d1f0dfc3..72ec7f313ca26f40cced3119adaffa8f01ce872c 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -1158,10 +1158,15 @@ public abstract class PlayerList {
         p_72381_1_.field_71134_c.func_73077_b(p_72381_3_.field_241103_E_.func_76077_q()); // CraftBukkit
     }
 
+    // Paper start - Extract method to allow for restarting flag
     public void func_72392_r() {
+        this.shutdown(false);
+    }
+
+    public void shutdown(boolean isRestarting) {
         // CraftBukkit start - disconnect safely
         for (ServerPlayerEntity player : this.field_72404_b) {
-            player.field_71135_a.disconnect(this.field_72400_f.server.getShutdownMessage()); // CraftBukkit - add custom shutdown message
+            player.field_71135_a.disconnect(!isRestarting ? this.field_72400_f.server.getShutdownMessage() : org.spigotmc.SpigotConfig.restartMessage); // CraftBukkit - add custom shutdown message // Paper - add isRestarting flag
         }
         // CraftBukkit end
 
@@ -1173,6 +1178,7 @@ public abstract class PlayerList {
         }
         // Paper end
     }
+    // Paper end
 
     // CraftBukkit start
     public void sendMessage(ITextComponent[] iChatBaseComponents) {
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index ae26e7828b89fc9ac630681f31c35915ca4dce5e..2070544d15b1a773a624a7d4d69bbec4c312e626 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -46,86 +46,134 @@ public class RestartCommand extends Command
         org.spigotmc.AsyncCatcher.shuttingDown = true; // Paper
         try
         {
-            String[] split = restartScript.split( " " );
-            if ( split.length > 0 && new File( split[0] ).isFile() )
+            // Paper - extract method and cleanup
+            boolean isRestarting = addShutdownHook( restartScript );
+            if ( isRestarting )
             {
-                System.out.println( "Attempting to restart with " + restartScript );
+                System.out.println( "Attempting to restart with " + SpigotConfig.restartScript );
+            } else
+            {
+                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+            }
+            // Stop the watchdog
+            WatchdogThread.doStop();
 
-                // Disable Watchdog
-                WatchdogThread.doStop();
+            shutdownServer( isRestarting );
+            // Paper end
+        } catch ( Exception ex )
+        {
+            ex.printStackTrace();
+        }
+    }
 
-                // Kick all players
-                for ( ServerPlayerEntity p : (List< ServerPlayerEntity>) MinecraftServer.getServer().func_184103_al().field_72404_b )
-                {
-                    p.field_71135_a.disconnect(SpigotConfig.restartMessage);
-                }
-                // Give the socket a chance to send the packets
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
-                }
-                // Close the socket so we can rebind with the new process
-                MinecraftServer.getServer().func_147137_ag().func_151268_b();
+    // Paper start - sync copied from above with minor changes, async added
+    private static void shutdownServer(boolean isRestarting)
+    {
+        if ( MinecraftServer.getServer().func_213162_bc() )
+        {
+            // Kick all players
+            for ( ServerPlayerEntity p : com.google.common.collect.ImmutableList.copyOf( MinecraftServer.getServer().func_184103_al().field_72404_b ) )
+            {
+                p.field_71135_a.disconnect(SpigotConfig.restartMessage);
+            }
+            // Give the socket a chance to send the packets
+            try
+            {
+                Thread.sleep( 100 );
+            } catch ( InterruptedException ex )
+            {
+            }
 
-                // Give time for it to kick in
-                try
-                {
-                    Thread.sleep( 100 );
-                } catch ( InterruptedException ex )
-                {
-                }
+            closeSocket();
 
-                // Actually shutdown
-                try
-                {
-                    MinecraftServer.getServer().close();
-                } catch ( Throwable t )
-                {
-                }
+            // Actually shutdown
+            try
+            {
+                MinecraftServer.getServer().close(); // calls stop()
+            } catch ( Throwable t )
+            {
+            }
+
+            // Actually stop the JVM
+            System.exit( 0 );
 
-                // This will be done AFTER the server has completely halted
-                Thread shutdownHook = new Thread()
+        } else
+        {
+            // Mark the server to shutdown at the end of the tick
+            MinecraftServer.getServer().safeShutdown( false, isRestarting );
+
+            // wait 10 seconds to see if we're actually going to try shutdown
+            try
+            {
+                Thread.sleep( 10000 );
+            }
+            catch (InterruptedException ignored)
+            {
+            }
+
+            // Check if we've actually hit a state where the server is going to safely shutdown
+            // if we have, let the server stop as usual
+            if (MinecraftServer.getServer().func_71241_aa()) return;
+
+            // If the server hasn't stopped by now, assume worse case and kill
+            closeSocket();
+            System.exit( 0 );
+        }
+    }
+    // Paper end
+
+    // Paper - Split from moved code
+    private static void closeSocket()
+    {
+        // Close the socket so we can rebind with the new process
+        MinecraftServer.getServer().func_147137_ag().func_151268_b();
+
+        // Give time for it to kick in
+        try
+        {
+            Thread.sleep( 100 );
+        } catch ( InterruptedException ex )
+        {
+        }
+    }
+    // Paper end
+
+    // Paper start - copied from above and modified to return if the hook registered
+    private static boolean addShutdownHook(String restartScript)
+    {
+        String[] split = restartScript.split( " " );
+        if ( split.length > 0 && new File( split[0] ).isFile() )
+        {
+            Thread shutdownHook = new Thread()
+            {
+                @Override
+                public void run()
                 {
-                    @Override
-                    public void run()
+                    try
                     {
-                        try
+                        String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
+                        if ( os.contains( "win" ) )
                         {
-                            String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
-                            if ( os.contains( "win" ) )
-                            {
-                                Runtime.getRuntime().exec( "cmd /c start " + restartScript );
-                            } else
-                            {
-                                Runtime.getRuntime().exec( "sh " + restartScript );
-                            }
-                        } catch ( Exception e )
+                            Runtime.getRuntime().exec( "cmd /c start " + restartScript );
+                        } else
                         {
-                            e.printStackTrace();
+                            Runtime.getRuntime().exec( "sh " + restartScript );
                         }
+                    } catch ( Exception e )
+                    {
+                        e.printStackTrace();
                     }
-                };
-
-                shutdownHook.setDaemon( true );
-                Runtime.getRuntime().addShutdownHook( shutdownHook );
-            } else
-            {
-                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
-
-                // Actually shutdown
-                try
-                {
-                    MinecraftServer.getServer().close();
-                } catch ( Throwable t )
-                {
                 }
-            }
-            System.exit( 0 );
-        } catch ( Exception ex )
+            };
+
+            shutdownHook.setDaemon( true );
+            Runtime.getRuntime().addShutdownHook( shutdownHook );
+            return true;
+        } else
         {
-            ex.printStackTrace();
+            return false;
         }
     }
+    // Paper end
+
 }
