From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 6 May 2020 23:30:30 -0400
Subject: [PATCH] Optimize NibbleArray to use pooled buffers

Massively reduces memory allocation of 2048 byte buffers by using
an object pool for these.

Uses lots of advanced new capabilities of the Paper codebase :)

diff --git a/src/main/java/net/minecraft/network/play/server/SUpdateLightPacket.java b/src/main/java/net/minecraft/network/play/server/SUpdateLightPacket.java
index 5c57aefb1ba853f4a93e2f876c6176d8bf4aa93b..d6e8a9a3aca78dfa937e1eb93933da3274d4d088 100644
--- a/src/main/java/net/minecraft/network/play/server/SUpdateLightPacket.java
+++ b/src/main/java/net/minecraft/network/play/server/SUpdateLightPacket.java
@@ -1,12 +1,16 @@
 package net.minecraft.network.play.server;
 
 import com.google.common.collect.Lists;
+import io.netty.channel.ChannelFuture; // Paper
+
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.List;
 import net.minecraft.client.network.play.IClientPlayNetHandler;
+import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.IPacket;
 import net.minecraft.network.PacketBuffer;
+import net.minecraft.server.MCUtil;
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.SectionPos;
 import net.minecraft.world.LightType;
@@ -25,14 +29,43 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
     private List<byte[]> field_218727_h;
     private boolean field_241783_i_;
 
+    // Paper start
+    java.lang.Runnable cleaner1;
+    java.lang.Runnable cleaner2;
+    java.util.concurrent.atomic.AtomicInteger remainingSends = new java.util.concurrent.atomic.AtomicInteger(0);
+
+    @Override
+    public void onPacketDispatch(ServerPlayerEntity player) {
+        remainingSends.incrementAndGet();
+    }
+
+    @Override
+    public void onPacketDispatchFinish(ServerPlayerEntity player, ChannelFuture future) {
+        if (remainingSends.decrementAndGet() <= 0) {
+            // incase of any race conditions, schedule this delayed
+            MCUtil.scheduleTask(5, () -> {
+                if (remainingSends.get() == 0) {
+                    cleaner1.run();
+                    cleaner2.run();
+                }
+            }, "Light Packet Release");
+        }
+    }
+
+    @Override
+    public boolean hasFinishListener() {
+        return true;
+    }
+
+    // Paper end
     public SUpdateLightPacket() {}
 
     public SUpdateLightPacket(ChunkPos chunkcoordintpair, WorldLightManager lightengine, boolean flag) {
         this.field_218720_a = chunkcoordintpair.field_77276_a;
         this.field_218721_b = chunkcoordintpair.field_77275_b;
         this.field_241783_i_ = flag;
-        this.field_218726_g = Lists.newArrayList();
-        this.field_218727_h = Lists.newArrayList();
+        this.field_218726_g = Lists.newArrayList();cleaner1 = MCUtil.registerListCleaner(this, this.field_218726_g, NibbleArray::releaseBytes); // Paper
+        this.field_218727_h = Lists.newArrayList();cleaner2 = MCUtil.registerListCleaner(this, this.field_218727_h, NibbleArray::releaseBytes); // Paper
 
         for (int i = 0; i < 18; ++i) {
             NibbleArray nibblearray = lightengine.func_215569_a(LightType.SKY).func_215612_a(SectionPos.func_218156_a(chunkcoordintpair, -1 + i));
@@ -43,7 +76,7 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
                     this.field_218724_e |= 1 << i;
                 } else {
                     this.field_218722_c |= 1 << i;
-                    this.field_218726_g.add(nibblearray.func_177481_a().clone());
+                    this.field_218726_g.add(nibblearray.getCloneIfSet()); // Paper
                 }
             }
 
@@ -52,7 +85,7 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
                     this.field_218725_f |= 1 << i;
                 } else {
                     this.field_218723_d |= 1 << i;
-                    this.field_218727_h.add(nibblearray1.func_177481_a().clone());
+                    this.field_218727_h.add(nibblearray1.getCloneIfSet()); // Paper
                 }
             }
         }
@@ -65,8 +98,8 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
         this.field_241783_i_ = flag;
         this.field_218722_c = i;
         this.field_218723_d = j;
-        this.field_218726_g = Lists.newArrayList();
-        this.field_218727_h = Lists.newArrayList();
+        this.field_218726_g = Lists.newArrayList();cleaner1 = MCUtil.registerListCleaner(this, this.field_218726_g, NibbleArray::releaseBytes); // Paper
+        this.field_218727_h = Lists.newArrayList();cleaner2 = MCUtil.registerListCleaner(this, this.field_218727_h, NibbleArray::releaseBytes); // Paper
 
         for (int k = 0; k < 18; ++k) {
             NibbleArray nibblearray;
@@ -74,7 +107,7 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
             if ((this.field_218722_c & 1 << k) != 0) {
                 nibblearray = lightengine.func_215569_a(LightType.SKY).func_215612_a(SectionPos.func_218156_a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.func_215655_c()) {
-                    this.field_218726_g.add(nibblearray.func_177481_a().clone());
+                    this.field_218726_g.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
                     this.field_218722_c &= ~(1 << k);
                     if (nibblearray != null) {
@@ -86,7 +119,7 @@ public class SUpdateLightPacket implements IPacket<IClientPlayNetHandler> {
             if ((this.field_218723_d & 1 << k) != 0) {
                 nibblearray = lightengine.func_215569_a(LightType.BLOCK).func_215612_a(SectionPos.func_218156_a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.func_215655_c()) {
-                    this.field_218727_h.add(nibblearray.func_177481_a().clone());
+                    this.field_218727_h.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
                     this.field_218723_d &= ~(1 << k);
                     if (nibblearray != null) {
diff --git a/src/main/java/net/minecraft/world/chunk/NibbleArray.java b/src/main/java/net/minecraft/world/chunk/NibbleArray.java
index 122ffa5f3e347fbe41f77db626e91d7fbac72335..c514c40035ef2712ee5c7f2c25f4df6625c71edf 100644
--- a/src/main/java/net/minecraft/world/chunk/NibbleArray.java
+++ b/src/main/java/net/minecraft/world/chunk/NibbleArray.java
@@ -1,19 +1,79 @@
 package net.minecraft.world.chunk;
 
+import com.destroystokyo.paper.util.pooled.PooledObjects; // Paper
+
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+import net.minecraft.server.MCUtil;
 import net.minecraft.util.Util;
 
 public class NibbleArray {
 
-    @Nullable
-    protected byte[] field_76585_a;
+    // Paper start
+    public static byte[] EMPTY_NIBBLE = new byte[2048];
+    private static final int nibbleBucketSizeMultiplier = Integer.getInteger("Paper.nibbleBucketSize", 3072);
+    private static final int maxPoolSize = Integer.getInteger("Paper.maxNibblePoolSize", (int) Math.min(6, Math.max(1, Runtime.getRuntime().maxMemory() / 1024 / 1024 / 1024)) * (nibbleBucketSizeMultiplier * 8));
+    public static final PooledObjects<byte[]> BYTE_2048 = new PooledObjects<>(() -> new byte[2048], maxPoolSize);
+    public static void releaseBytes(byte[] bytes) {
+        if (bytes != null && bytes != EMPTY_NIBBLE && bytes.length == 2048) {
+            System.arraycopy(EMPTY_NIBBLE, 0, bytes, 0, 2048);
+            BYTE_2048.release(bytes);
+        }
+    }
+
+    public NibbleArray markPoolSafe(byte[] bytes) {
+        if (bytes != EMPTY_NIBBLE) this.field_76585_a = bytes;
+        return markPoolSafe();
+    }
+    public NibbleArray markPoolSafe() {
+        poolSafe = true;
+        return this;
+    }
+    public byte[] getIfSet() {
+        return this.field_76585_a != null ? this.field_76585_a : EMPTY_NIBBLE;
+    }
+    public byte[] getCloneIfSet() {
+        if (field_76585_a == null) {
+            return EMPTY_NIBBLE;
+        }
+        byte[] ret = BYTE_2048.acquire();
+        System.arraycopy(getIfSet(), 0, ret, 0, 2048);
+        return ret;
+    }
+
+    public NibbleArray cloneAndSet(byte[] bytes) {
+        if (bytes != null && bytes != EMPTY_NIBBLE) {
+            this.field_76585_a = BYTE_2048.acquire();
+            System.arraycopy(bytes, 0, this.field_76585_a, 0, 2048);
+        }
+        return this;
+    }
+    boolean poolSafe = false;
+    public java.lang.Runnable cleaner;
+    private void registerCleaner() {
+        if (!poolSafe) {
+            cleaner = MCUtil.registerCleaner(this, this.field_76585_a, NibbleArray::releaseBytes);
+        } else {
+            cleaner = MCUtil.once(() -> NibbleArray.releaseBytes(this.field_76585_a));
+        }
+    }
+    // Paper end
+    @Nullable protected byte[] field_76585_a;
+
 
     public NibbleArray() {}
 
     public NibbleArray(byte[] p_i45646_1_) {
-        this.field_76585_a = p_i45646_1_;
-        if (p_i45646_1_.length != 2048) {
-            throw (IllegalArgumentException) Util.func_229757_c_(new IllegalArgumentException("ChunkNibbleArrays should be 2048 bytes not: " + p_i45646_1_.length));
+        // Paper start
+        this(p_i45646_1_, false);
+    }
+    public NibbleArray(byte[] abyte, boolean isSafe) {
+        this.field_76585_a = abyte;
+        if (!isSafe) this.field_76585_a = getCloneIfSet(); // Paper - clone for safety
+        registerCleaner();
+        // Paper end
+        if (abyte.length != 2048) {
+            throw (IllegalArgumentException) Util.func_229757_c_(new IllegalArgumentException("ChunkNibbleArrays should be 2048 bytes not: " + abyte.length));
         }
     }
 
@@ -45,7 +105,8 @@ public class NibbleArray {
 
     public void func_177482_a(int p_177482_1_, int p_177482_2_) { // PAIL: private -> public
         if (this.field_76585_a == null) {
-            this.field_76585_a = new byte[2048];
+            this.field_76585_a = BYTE_2048.acquire(); // Paper
+            registerCleaner();// Paper
         }
 
         int k = this.func_177478_c(p_177482_1_);
@@ -67,14 +128,36 @@ public class NibbleArray {
     public byte[] func_177481_a() {
         if (this.field_76585_a == null) {
             this.field_76585_a = new byte[2048];
+        } else { // Paper start
+            // Accessor may need this object past garbage collection so need to clone it and return pooled value
+            // If we know its safe for pre GC access, use asBytesPoolSafe(). If you just need read, use getIfSet()
+            Runnable cleaner = this.cleaner;
+            if (cleaner != null) {
+                this.field_76585_a = this.field_76585_a.clone();
+                cleaner.run(); // release the previously pooled value
+                this.cleaner = null;
+            }
+        }
+        // Paper end
+
+        return this.field_76585_a;
+    }
+
+    @Nonnull
+    public byte[] asBytesPoolSafe() {
+        if (this.field_76585_a == null) {
+            this.field_76585_a = BYTE_2048.acquire(); // Paper
+            registerCleaner(); // Paper
         }
 
+        //noinspection ConstantConditions
         return this.field_76585_a;
     }
+    // Paper end
 
     public NibbleArray copy() { return this.func_215654_b(); } // Paper - OBFHELPER
     public NibbleArray func_215654_b() {
-        return this.field_76585_a == null ? new NibbleArray() : new NibbleArray((byte[]) this.field_76585_a.clone());
+        return this.field_76585_a == null ? new NibbleArray() : new NibbleArray(this.field_76585_a); // Paper - clone in ctor
     }
 
     public String toString() {
diff --git a/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
index 929b8e9648b12a82e89c54162cba38a741b3b359..786014261f04ec1581b829fd44aa503156a75522 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
@@ -429,11 +429,11 @@ public class ChunkSerializer {
                 }
 
                 if (nibblearray != null && !nibblearray.func_215655_c()) {
-                    nbttagcompound2.func_74773_a("BlockLight", nibblearray.func_177481_a());
+                    nbttagcompound2.func_74773_a("BlockLight", nibblearray.asBytesPoolSafe().clone()); // Paper
                 }
 
                 if (nibblearray1 != null && !nibblearray1.func_215655_c()) {
-                    nbttagcompound2.func_74773_a("SkyLight", nibblearray1.func_177481_a());
+                    nbttagcompound2.func_74773_a("SkyLight", nibblearray1.asBytesPoolSafe().clone()); // Paper
                 }
 
                 nbttaglist.add(nbttagcompound2);
diff --git a/src/main/java/net/minecraft/world/lighting/LightDataMap.java b/src/main/java/net/minecraft/world/lighting/LightDataMap.java
index 2a919ce9876736ef55922134bcaf75260dc507fe..b8f6ca466020b8d9975404c093af014f6a552bd5 100644
--- a/src/main/java/net/minecraft/world/lighting/LightDataMap.java
+++ b/src/main/java/net/minecraft/world/lighting/LightDataMap.java
@@ -2,6 +2,7 @@ package net.minecraft.world.lighting;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import javax.annotation.Nullable;
+import net.minecraft.server.MCUtil;
 import net.minecraft.world.chunk.NibbleArray;
 
 public abstract class LightDataMap<M extends LightDataMap<M>> {
@@ -34,7 +35,9 @@ public abstract class LightDataMap<M extends LightDataMap<M>> {
 
     public void func_215641_a(long p_215641_1_) {
         if (this.isVisible) { throw new IllegalStateException("writing to visible data"); } // Paper - avoid copying light data
-        this.data.queueUpdate(p_215641_1_, ((NibbleArray) this.data.getUpdating(p_215641_1_)).func_215654_b()); // Paper - avoid copying light data
+        NibbleArray updating = this.data.getUpdating(p_215641_1_); // Paper - pool nibbles
+        this.data.queueUpdate(p_215641_1_, new NibbleArray().markPoolSafe(updating.getCloneIfSet())); // Paper - avoid copying light data - pool safe clone
+        if (updating.cleaner != null) MCUtil.scheduleTask(2, updating.cleaner, "Light Engine Release"); // Paper - delay clean incase anything holding ref was still using it
         this.func_215643_c();
     }
 
diff --git a/src/main/java/net/minecraft/world/lighting/NibbleArrayRepeater.java b/src/main/java/net/minecraft/world/lighting/NibbleArrayRepeater.java
index bca1aa0a881f4b36fffc8863b3b2f684e5fcaf8b..51bafb8f0af30af4ef298df2b7d00702169aac10 100644
--- a/src/main/java/net/minecraft/world/lighting/NibbleArrayRepeater.java
+++ b/src/main/java/net/minecraft/world/lighting/NibbleArrayRepeater.java
@@ -10,7 +10,7 @@ public class NibbleArrayRepeater extends NibbleArray {
 
     public NibbleArrayRepeater(NibbleArray nibblearray, int i) {
         super(128);
-        System.arraycopy(nibblearray.func_177481_a(), i * 128, this.field_76585_a, 0, 128);
+        System.arraycopy(nibblearray.getIfSet(), i * 128, this.field_76585_a, 0, 128); // Paper
     }
 
     @Override
@@ -20,7 +20,7 @@ public class NibbleArrayRepeater extends NibbleArray {
 
     @Override
     public byte[] func_177481_a() {
-        byte[] abyte = new byte[2048];
+        byte[] abyte = BYTE_2048.acquire(); // Paper
 
         for (int i = 0; i < 16; ++i) {
             System.arraycopy(this.field_76585_a, 0, abyte, i * 128, 128);
diff --git a/src/main/java/net/minecraft/world/lighting/SectionLightStorage.java b/src/main/java/net/minecraft/world/lighting/SectionLightStorage.java
index c70912de4bbc65ea15d4695f4e3b948ffe06465d..b3dc3f23890f2fc0ba010f042f5d6732366f96cf 100644
--- a/src/main/java/net/minecraft/world/lighting/SectionLightStorage.java
+++ b/src/main/java/net/minecraft/world/lighting/SectionLightStorage.java
@@ -156,7 +156,7 @@ public abstract class SectionLightStorage<M extends LightDataMap<M>> extends Sec
     protected NibbleArray func_215530_i(long p_215530_1_) {
         NibbleArray nibblearray = (NibbleArray) this.field_215542_i.get(p_215530_1_);
 
-        return nibblearray != null ? nibblearray : new NibbleArray();
+        return nibblearray != null ? nibblearray : new NibbleArray().markPoolSafe(); // Paper
     }
 
     protected void func_215528_a(LightEngine<?, ?> p_215528_1_, long p_215528_2_) {
@@ -338,12 +338,12 @@ public abstract class SectionLightStorage<M extends LightDataMap<M>> extends Sec
 
     protected void func_215529_a(long p_215529_1_, @Nullable NibbleArray p_215529_2_, boolean p_215529_3_) {
         if (p_215529_2_ != null) {
-            this.field_215542_i.put(p_215529_1_, p_215529_2_);
+            NibbleArray remove = this.field_215542_i.put(p_215529_1_, p_215529_2_); if (remove != null && remove.cleaner != null) remove.cleaner.run(); // Paper - clean up when removed
             if (!p_215529_3_) {
                 this.field_241536_n_.add(p_215529_1_);
             }
         } else {
-            this.field_215542_i.remove(p_215529_1_);
+            NibbleArray remove = this.field_215542_i.remove(p_215529_1_); if (remove != null && remove.cleaner != null) remove.cleaner.run(); // Paper - clean up when removed
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/lighting/SkyLightStorage.java b/src/main/java/net/minecraft/world/lighting/SkyLightStorage.java
index 83bde408e22a6cd02072b3f88d1b4481f8743187..9ec5874c0c311a196e29548858cf018728b27380 100644
--- a/src/main/java/net/minecraft/world/lighting/SkyLightStorage.java
+++ b/src/main/java/net/minecraft/world/lighting/SkyLightStorage.java
@@ -172,9 +172,9 @@ public class SkyLightStorage extends SectionLightStorage<SkyLightStorage.Storage
                     j = SectionPos.func_218172_a(j, Direction.UP);
                 }
 
-                return new NibbleArray((new NibbleArrayRepeater(nibblearray1, 0)).func_177481_a());
+                return new NibbleArray().markPoolSafe(new NibbleArrayRepeater(nibblearray1, 0).func_177481_a()); // Paper - mark pool use as safe (no auto cleaner)
             } else {
-                return new NibbleArray();
+                return new NibbleArray().markPoolSafe(); // Paper - mark pool use as safe (no auto cleaner)
             }
         }
     }
@@ -203,7 +203,7 @@ public class SkyLightStorage extends SectionLightStorage<SkyLightStorage.Storage
                                 ((SkyLightStorage.StorageMap) this.field_215539_f).func_215641_a(i);
                             }
 
-                            Arrays.fill(this.func_215520_a(i, true).func_177481_a(), (byte) -1);
+                            Arrays.fill(this.func_215520_a(i, true).asBytesPoolSafe(), (byte) -1); // Paper
                             k = SectionPos.func_218142_c(SectionPos.func_218173_b(i));
                             l = SectionPos.func_218142_c(SectionPos.func_218144_c(i));
                             int i1 = SectionPos.func_218142_c(SectionPos.func_218153_d(i));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index ec3d16b52a81601fb682cf3d2d7026c2257595ad..9088b816dbbbe3584531ddeb9815429c48b8da2d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -272,14 +272,14 @@ public class CraftChunk implements Chunk {
                     sectionSkyLights[i] = emptyLight;
                 } else {
                     sectionSkyLights[i] = new byte[2048];
-                    System.arraycopy(skyLightArray.func_177481_a(), 0, sectionSkyLights[i], 0, 2048);
+                    System.arraycopy(skyLightArray.getIfSet(), 0, sectionSkyLights[i], 0, 2048); // Paper
                 }
                 NibbleArray emitLightArray = lightengine.func_215569_a(LightType.BLOCK).func_215612_a(SectionPos.func_218154_a(x, i, z));
                 if (emitLightArray == null) {
                     sectionEmitLights[i] = emptyLight;
                 } else {
                     sectionEmitLights[i] = new byte[2048];
-                    System.arraycopy(emitLightArray.func_177481_a(), 0, sectionEmitLights[i], 0, 2048);
+                    System.arraycopy(emitLightArray.getIfSet(), 0, sectionEmitLights[i], 0, 2048); // Paper
                 }
             }
         }
