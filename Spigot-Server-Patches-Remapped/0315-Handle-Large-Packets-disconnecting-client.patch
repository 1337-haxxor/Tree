From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 27 Nov 2018 21:18:06 -0500
Subject: [PATCH] Handle Large Packets disconnecting client

If a players inventory is too big to send in a single packet,
split the inventory set into multiple packets instead.

diff --git a/src/main/java/net/minecraft/network/IPacket.java b/src/main/java/net/minecraft/network/IPacket.java
index f795c590d4be3a91a53d7be82697f78790626e03..ee5dfe1f4335a43b2ee25c072027a99918b5ae55 100644
--- a/src/main/java/net/minecraft/network/IPacket.java
+++ b/src/main/java/net/minecraft/network/IPacket.java
@@ -10,6 +10,12 @@ public interface IPacket<T extends INetHandler> {
 
     void func_148833_a(T p_148833_1_);
 
+    // Paper start
+    default boolean packetTooLarge(NetworkManager manager) {
+        return false;
+    }
+    // Paper end
+
     default boolean func_211402_a() {
         return false;
     }
diff --git a/src/main/java/net/minecraft/network/NettyPacketEncoder.java b/src/main/java/net/minecraft/network/NettyPacketEncoder.java
index 1e78c81ca95ba300f34ef47097836309a65b3f6e..d6949f2150a3857a51a0afd9f8753110cc0743e8 100644
--- a/src/main/java/net/minecraft/network/NettyPacketEncoder.java
+++ b/src/main/java/net/minecraft/network/NettyPacketEncoder.java
@@ -49,7 +49,31 @@ public class NettyPacketEncoder extends MessageToByteEncoder<IPacket<?>> {
                         throw throwable;
                     }
                 }
+
+                // Paper start
+                int packetLength = bytebuf.readableBytes();
+                if (packetLength > MAX_PACKET_SIZE) {
+                    throw new PacketTooLargeException(packet, packetLength);
+                }
+                // Paper end
             }
         }
     }
+
+    // Paper start
+    private static int MAX_PACKET_SIZE = 2097152;
+
+    public static class PacketTooLargeException extends RuntimeException {
+        private final IPacket<?> packet;
+
+        PacketTooLargeException(IPacket<?> packet, int packetLength) {
+            super("PacketTooLarge - " + packet.getClass().getSimpleName() + " is " + packetLength + ". Max is " + MAX_PACKET_SIZE);
+            this.packet = packet;
+        }
+
+        public IPacket<?> getPacket() {
+            return packet;
+        }
+    }
+    // Paper end
 }
diff --git a/src/main/java/net/minecraft/network/NetworkManager.java b/src/main/java/net/minecraft/network/NetworkManager.java
index f11483fd001648c89c149c2f2622f443cb66b007..bc6d5cb8ee173b6d46d559d78d5c476b73ed8b28 100644
--- a/src/main/java/net/minecraft/network/NetworkManager.java
+++ b/src/main/java/net/minecraft/network/NetworkManager.java
@@ -12,6 +12,7 @@ import io.netty.channel.epoll.EpollEventLoopGroup;
 import io.netty.channel.local.LocalChannel;
 import io.netty.channel.local.LocalServerChannel;
 import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.handler.codec.EncoderException; // Paper
 import io.netty.handler.timeout.TimeoutException;
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
@@ -105,6 +106,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<IPacket<?>> {
     }
 
     public void exceptionCaught(ChannelHandlerContext channelhandlercontext, Throwable throwable) {
+        // Paper start
+        if (throwable instanceof EncoderException && throwable.getCause() instanceof NettyPacketEncoder.PacketTooLargeException) {
+            if (((NettyPacketEncoder.PacketTooLargeException) throwable.getCause()).getPacket().packetTooLarge(this)) {
+                return;
+            } else {
+                throwable = throwable.getCause();
+            }
+        }
+        // Paper end
         if (throwable instanceof SkipableEncoderException) {
             NetworkManager.field_150735_g.debug("Skipping packet due to errors", throwable.getCause());
         } else {
diff --git a/src/main/java/net/minecraft/network/play/server/SChunkDataPacket.java b/src/main/java/net/minecraft/network/play/server/SChunkDataPacket.java
index 0960e0608b3815a0bed990d33269c79b89e3f687..a1801eba7483ec597a8a859bce49ac72890f365f 100644
--- a/src/main/java/net/minecraft/network/play/server/SChunkDataPacket.java
+++ b/src/main/java/net/minecraft/network/play/server/SChunkDataPacket.java
@@ -92,7 +92,7 @@ public class SChunkDataPacket implements IPacket<IClientPlayNetHandler> {
 
         int i = p_148837_1_.func_150792_a();
 
-        if (i > 2097152) {
+        if (i > 2097152) { // Paper - if this changes, update PacketEncoder
             throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
         } else {
             this.field_186949_d = new byte[i];
diff --git a/src/main/java/net/minecraft/network/play/server/SWindowItemsPacket.java b/src/main/java/net/minecraft/network/play/server/SWindowItemsPacket.java
index 23d51c4e544584b2fbd9701aa0028e551a07bd89..dee8ed47cfc8e28422e5a458e74520fe5de7fc0b 100644
--- a/src/main/java/net/minecraft/network/play/server/SWindowItemsPacket.java
+++ b/src/main/java/net/minecraft/network/play/server/SWindowItemsPacket.java
@@ -6,6 +6,7 @@ import java.util.List;
 import net.minecraft.client.network.play.IClientPlayNetHandler;
 import net.minecraft.item.ItemStack;
 import net.minecraft.network.IPacket;
+import net.minecraft.network.NetworkManager;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.NonNullList;
 
@@ -14,6 +15,15 @@ public class SWindowItemsPacket implements IPacket<IClientPlayNetHandler> {
     private int field_148914_a;
     private List<ItemStack> field_148913_b;
 
+    //Paper start
+    @Override
+    public boolean packetTooLarge(NetworkManager manager) {
+        for (int i = 0 ; i < this.field_148913_b.size() ; i++) {
+            manager.func_179290_a(new SSetSlotPacket(this.field_148914_a, i, this.field_148913_b.get(i)));
+        }
+        return true;
+    }
+    // Paper end
     public SWindowItemsPacket() {}
 
     public SWindowItemsPacket(int i, NonNullList<ItemStack> nonnulllist) {
