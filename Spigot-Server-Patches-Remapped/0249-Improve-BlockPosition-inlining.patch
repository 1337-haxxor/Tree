From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Wed, 30 Nov 2016 20:56:58 -0600
Subject: [PATCH] Improve BlockPosition inlining

Normally the JVM can inline virtual getters by having two sets of code, one is the 'optimized' code and the other is the 'deoptimized' code.
If a single type is used 99% of the time, then its worth it to inline, and to revert to 'deoptimized' the 1% of the time we encounter other types.
But if two types are encountered commonly, then the JVM can't inline them both, and the call overhead remains.

This scenario also occurs with BlockPos and MutableBlockPos.
The variables in BlockPos are final, so MutableBlockPos can't modify them.
MutableBlockPos fixes this by adding custom mutable variables, and overriding the getters to access them.

This approach with utility methods that operate on MutableBlockPos and BlockPos.
Specific examples are BlockPosition.up(), and World.isValidLocation().
It makes these simple methods much slower than they need to be.

This should result in an across the board speedup in anything that accesses blocks or does logic with positions.

This is based upon conclusions drawn from inspecting the assenmbly generated bythe JIT compiler on my microbenchmarks.
They had 'callq' (invoke) instead of 'mov' (get from memory) instructions.

diff --git a/src/main/java/net/minecraft/util/math/BlockPos.java b/src/main/java/net/minecraft/util/math/BlockPos.java
index edc4e53c42ee00656e7490899bd90706ec18c1c4..68727d8496e8a48ffa965b65da975dc22c12b55d 100644
--- a/src/main/java/net/minecraft/util/math/BlockPos.java
+++ b/src/main/java/net/minecraft/util/math/BlockPos.java
@@ -88,6 +88,7 @@ public class BlockPos extends Vector3i {
         return func_218276_a(this.func_177958_n(), this.func_177956_o(), this.func_177952_p());
     }
 
+    public static long asLong(int x, int y, int z) { return func_218276_a(x, y, z); } // Paper - OBFHELPER
     public static long func_218276_a(int p_218276_0_, int p_218276_1_, int p_218276_2_) {
         long l = 0L;
 
diff --git a/src/main/java/net/minecraft/util/math/vector/Vector3i.java b/src/main/java/net/minecraft/util/math/vector/Vector3i.java
index 6341286ce21348be80f8379e72729a198d62e386..26792422b1a891ad3c6bf79c5ae14d23ce6e5203 100644
--- a/src/main/java/net/minecraft/util/math/vector/Vector3i.java
+++ b/src/main/java/net/minecraft/util/math/vector/Vector3i.java
@@ -43,7 +43,7 @@ public class Vector3i implements Comparable<Vector3i> {
         this(MathHelper.func_76128_c(p_i46008_1_), MathHelper.func_76128_c(p_i46008_2_), MathHelper.func_76128_c(p_i46008_3_));
     }
 
-    public boolean equals(Object object) {
+    public final boolean equals(Object object) { // Paper
         if (this == object) {
             return true;
         } else if (!(object instanceof Vector3i)) {
@@ -55,7 +55,7 @@ public class Vector3i implements Comparable<Vector3i> {
         }
     }
 
-    public int hashCode() {
+    public final int hashCode() { // Paper
         return (this.func_177956_o() + this.func_177952_p() * 31) * 31 + this.func_177958_n();
     }
 
@@ -63,15 +63,15 @@ public class Vector3i implements Comparable<Vector3i> {
         return this.func_177956_o() == baseblockposition.func_177956_o() ? (this.func_177952_p() == baseblockposition.func_177952_p() ? this.func_177958_n() - baseblockposition.func_177958_n() : this.func_177952_p() - baseblockposition.func_177952_p()) : this.func_177956_o() - baseblockposition.func_177956_o();
     }
 
-    public int func_177958_n() {
+    public final int func_177958_n() { // Paper
         return this.field_177962_a;
     }
 
-    public int func_177956_o() {
+    public final int func_177956_o() { // Paper
         return this.field_177960_b;
     }
 
-    public int func_177952_p() {
+    public final int func_177952_p() { // Paper
         return this.field_177961_c;
     }
 
