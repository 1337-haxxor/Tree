From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joseph Hirschfeld <joe@ibj.io>
Date: Thu, 3 Mar 2016 03:15:41 -0600
Subject: [PATCH] Add exception reporting event


diff --git a/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..f699ce18ca044f813e194ef2786b7ea853ea86e7
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
@@ -0,0 +1,38 @@
+package com.destroystokyo.paper;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.craftbukkit.scheduler.CraftTask;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerSchedulerException;
+
+/**
+ * Reporting wrapper to catch exceptions not natively
+ */
+public class ServerSchedulerReportingWrapper implements Runnable {
+
+    private final CraftTask internalTask;
+
+    public ServerSchedulerReportingWrapper(CraftTask internalTask) {
+        this.internalTask = Preconditions.checkNotNull(internalTask, "internalTask");
+    }
+
+    @Override
+    public void run() {
+        try {
+            internalTask.run();
+        } catch (RuntimeException e) {
+            internalTask.getOwner().getServer().getPluginManager().callEvent(
+                    new ServerExceptionEvent(new ServerSchedulerException(e, internalTask))
+            );
+            throw e;
+        } catch (Throwable t) {
+            internalTask.getOwner().getServer().getPluginManager().callEvent(
+                    new ServerExceptionEvent(new ServerSchedulerException(t, internalTask))
+            ); //Do not rethrow, since it is not permitted with Runnable#run
+        }
+    }
+
+    public CraftTask getInternalTask() {
+        return internalTask;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
index 6d3a11d10e254dc9d6988f22ac81e329dc0865d8..280a21744b1010a739759714fa4e4f60fdcb88cf 100644
--- a/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
+++ b/src/main/java/net/minecraft/server/management/PreYggdrasilConverter.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.management;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
@@ -360,6 +361,7 @@ public class PreYggdrasilConverter {
                             root = CompressedStreamTools.func_74796_a(new java.io.FileInputStream(file5));
                         } catch (Exception exception) {
                             exception.printStackTrace();
+                            ServerInternalException.reportInternalException(exception); // Paper
                         }
 
                         if (root != null) {
@@ -373,6 +375,7 @@ public class PreYggdrasilConverter {
                                 CompressedStreamTools.func_74799_a(root, new java.io.FileOutputStream(file2));
                             } catch (Exception exception) {
                                 exception.printStackTrace();
+                                ServerInternalException.reportInternalException(exception); // Paper
                             }
                        }
                         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/village/VillageSiege.java b/src/main/java/net/minecraft/village/VillageSiege.java
index eaf7a928566ac92771aafab3775c1c83e5175a1a..74e69c45257b6e8abb945f315662505673779594 100644
--- a/src/main/java/net/minecraft/village/VillageSiege.java
+++ b/src/main/java/net/minecraft/village/VillageSiege.java
@@ -1,5 +1,7 @@
 package net.minecraft.village;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
+
 import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.entity.EntityType;
@@ -119,6 +121,7 @@ public class VillageSiege implements ISpecialSpawner {
                 entityzombie.func_213386_a(p_75530_1_, p_75530_1_.func_175649_E(entityzombie.func_233580_cy_()), SpawnReason.EVENT, (ILivingEntityData) null, (CompoundNBT) null);
             } catch (Exception exception) {
                 VillageSiege.field_242320_a.warn("Failed to create zombie for village siege at {}", vec3d, exception);
+                ServerInternalException.reportInternalException(exception); // Paper
                 return;
             }
 
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index c97e4ac2497ea1427bcefdb74e425962d235a03b..c8d6a72a80c4d9163ce1ae1c41ad23f8abb2bf9b 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -1,5 +1,10 @@
 package net.minecraft.world;
 
+import co.aikar.timings.Timing;
+import co.aikar.timings.Timings;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerInternalException;
+import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
@@ -736,8 +741,11 @@ public abstract class World implements IWorld, AutoCloseable {
                         gameprofilerfiller.func_76319_b();
                     } catch (Throwable throwable) {
                         // Paper start - Prevent tile entity and entity crashes
-                        System.err.println("TileEntity threw exception at " + tileentity.field_145850_b.getWorld().getName() + ":" + tileentity.field_174879_c.func_177958_n() + "," + tileentity.field_174879_c.func_177956_o() + "," + tileentity.field_174879_c.func_177952_p());
+                        String msg = "TileEntity threw exception at " + tileentity.field_145850_b.getWorld().getName() + ":" + tileentity.field_174879_c.func_177958_n() + "," + tileentity.field_174879_c.func_177956_o() + "," + tileentity.field_174879_c.func_177952_p();
+                        System.err.println(msg);
                         throwable.printStackTrace();
+                        getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
+                        // Paper end
                         tilesThisCycle--;
                         this.field_175730_i.remove(tileTickPosition--);
                         continue;
@@ -808,8 +816,10 @@ public abstract class World implements IWorld, AutoCloseable {
             p_217390_1_.accept(p_217390_2_);
         } catch (Throwable throwable) {
             // Paper start - Prevent tile entity and entity crashes
-            System.err.println("Entity threw exception at " + p_217390_2_.field_70170_p.getWorld().getName() + ":" + p_217390_2_.func_226277_ct_() + "," + p_217390_2_.func_226278_cu_() + "," + p_217390_2_.func_226281_cx_());
+            String msg = "Entity threw exception at " + p_217390_2_.field_70170_p.getWorld().getName() + ":" + p_217390_2_.func_226277_ct_() + "," + p_217390_2_.func_226278_cu_() + "," + p_217390_2_.func_226281_cx_();
+            System.err.println(msg);
             throwable.printStackTrace();
+            getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
             p_217390_2_.field_70128_L = true;
             return;
             // Paper end
diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index cd173aab805568bc9be484de09486883c8206c5e..d34a423831d306ed24996126146ac6c3fb8d80de 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk;
 
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
@@ -656,10 +657,15 @@ public class Chunk implements IChunk {
             this.field_150816_i.remove(p_177426_1_);
             // Paper end
         } else {
-            System.out.println("Attempted to place a tile entity (" + p_177426_2_ + ") at " + p_177426_2_.field_174879_c.func_177958_n() + "," + p_177426_2_.field_174879_c.func_177956_o() + "," + p_177426_2_.field_174879_c.func_177952_p()
-                + " (" + func_180495_p(p_177426_1_) + ") where there was no entity tile!");
-            System.out.println("Chunk coordinates: " + (this.field_212816_F.field_77276_a * 16) + "," + (this.field_212816_F.field_77275_b * 16));
-            new Exception().printStackTrace();
+            // Paper start
+            ServerInternalException e = new ServerInternalException(
+                    "Attempted to place a tile entity (" + p_177426_2_ + ") at " + p_177426_2_.field_174879_c.func_177958_n() + ","
+                            + p_177426_2_.field_174879_c.func_177956_o() + "," + p_177426_2_.field_174879_c.func_177952_p()
+                            + " (" + func_180495_p(p_177426_1_) + ") where there was no entity tile!\n" +
+                            "Chunk coordinates: " + (this.field_212816_F.field_77276_a * 16) + "," + (this.field_212816_F.field_77275_b * 16));
+            e.printStackTrace();
+            ServerInternalException.reportInternalException(e);
+            // Paper end
             // CraftBukkit end
         }
     }
diff --git a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
index 13885ced71a2a689195d770e042c245e0f76a02e..5b767fd15a75dc5fb3247530ad4eb6e3af34aa85 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/RegionFile.java
@@ -263,6 +263,7 @@ public class RegionFile implements AutoCloseable {
                     return true;
                 }
             } catch (IOException ioexception) {
+                com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(ioexception); // Paper
                 return false;
             }
         }
@@ -335,6 +336,7 @@ public class RegionFile implements AutoCloseable {
             filechannel.write(p_227138_2_);
         } catch (Throwable throwable1) {
             throwable = throwable1;
+            com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(throwable); // Paper
             throw throwable1;
         } finally {
             if (filechannel != null) {
diff --git a/src/main/java/net/minecraft/world/server/ChunkManager.java b/src/main/java/net/minecraft/world/server/ChunkManager.java
index 77b579ac55c8b33ebb47eddc833ebafc60c31aa0..6f99dea7ce2cc98ce47a0e6bc0609773369d52c1 100644
--- a/src/main/java/net/minecraft/world/server/ChunkManager.java
+++ b/src/main/java/net/minecraft/world/server/ChunkManager.java
@@ -811,6 +811,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
                 return true;
             } catch (Exception exception) {
                 ChunkManager.field_219250_d.error("Failed to save chunk {},{}", chunkcoordintpair.field_77276_a, chunkcoordintpair.field_77275_b, exception);
+                com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(exception); // Paper
                 return false;
             }
         }
diff --git a/src/main/java/net/minecraft/world/spawner/WorldEntitySpawner.java b/src/main/java/net/minecraft/world/spawner/WorldEntitySpawner.java
index cfaec1281fbe1ac3341a7daf50a9aeea0b2b883b..715be09839e986892bfccc4414923cf59e4750b7 100644
--- a/src/main/java/net/minecraft/world/spawner/WorldEntitySpawner.java
+++ b/src/main/java/net/minecraft/world/spawner/WorldEntitySpawner.java
@@ -53,6 +53,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
+import com.destroystokyo.paper.exception.ServerInternalException;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 // CraftBukkit end
 
@@ -306,6 +307,7 @@ public final class WorldEntitySpawner {
             }
         } catch (Exception exception) {
             WorldEntitySpawner.field_209383_a.warn("Failed to create mob", exception);
+            ServerInternalException.reportInternalException(exception); // Paper
             return null;
         }
     }
@@ -412,6 +414,7 @@ public final class WorldEntitySpawner {
                                 entity = biomesettingsmobs_c.field_242588_c.func_200721_a((World) p_77191_0_.func_201672_e());
                             } catch (Exception exception) {
                                 WorldEntitySpawner.field_209383_a.warn("Failed to create mob", exception);
+                                ServerInternalException.reportInternalException(exception); // Paper
                                 continue;
                             }
 
diff --git a/src/main/java/net/minecraft/world/storage/DimensionSavedDataManager.java b/src/main/java/net/minecraft/world/storage/DimensionSavedDataManager.java
index 6590d08d3f37b3bbfe70326ccad9b529befbab9f..acde12e09e93341374986c110b61f2403a50c0f5 100644
--- a/src/main/java/net/minecraft/world/storage/DimensionSavedDataManager.java
+++ b/src/main/java/net/minecraft/world/storage/DimensionSavedDataManager.java
@@ -149,6 +149,7 @@ public class DimensionSavedDataManager {
             }
         } catch (Throwable throwable6) {
             throwable = throwable6;
+            com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(throwable); // Paper
             throw throwable6;
         } finally {
             if (fileinputstream != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 8350ffc5bc23a19b70ee0baf0a5323418500ed59..12dbf310bd1ee28f05d3bac652e74a68c1549ba3 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -16,6 +16,9 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.logging.Level;
+import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
+import com.destroystokyo.paper.event.server.ServerExceptionEvent;
+import com.destroystokyo.paper.exception.ServerSchedulerException;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
@@ -419,6 +422,8 @@ public class CraftScheduler implements BukkitScheduler {
                             msg,
                             throwable);
                     }
+                    task.getOwner().getServer().getPluginManager().callEvent(
+                        new ServerExceptionEvent(new ServerSchedulerException(msg, throwable, task)));
                     // Paper end
                 } finally {
                     currentTask = null;
@@ -426,7 +431,7 @@ public class CraftScheduler implements BukkitScheduler {
                 parsePending();
             } else {
                 debugTail = debugTail.setNext(new CraftAsyncDebugger(currentTick + RECENT_TICKS, task.getOwner(), task.getTaskClass()));
-                executor.execute(task);
+                executor.execute(new ServerSchedulerReportingWrapper(task)); // Paper
                 // We don't need to parse pending
                 // (async tasks must live with race-conditions if they attempt to cancel between these few lines of code)
             }
