From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Callahan <mr.callahhh@gmail.com>
Date: Wed, 8 Apr 2020 02:42:14 -0500
Subject: [PATCH] Async command map building


diff --git a/src/main/java/net/minecraft/command/Commands.java b/src/main/java/net/minecraft/command/Commands.java
index 1039655d5be4e2ff196cd420ebb1dfeb6abf3316..02ae08de5fc0525f9f4ecc1d3be50edfb4e1a1d7 100644
--- a/src/main/java/net/minecraft/command/Commands.java
+++ b/src/main/java/net/minecraft/command/Commands.java
@@ -89,6 +89,7 @@ import net.minecraft.command.impl.WorldBorderCommand;
 import net.minecraft.command.impl.data.DataCommand;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.network.play.server.SCommandListPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.test.TestCommand;
 import net.minecraft.util.SharedConstants;
 import net.minecraft.util.Util;
@@ -327,25 +328,40 @@ public class Commands {
         if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
         // CraftBukkit start
         // Register Vanilla commands into builtRoot as before
+        // Paper start - Async command map building
+        java.util.concurrent.ForkJoinPool.commonPool().execute(() -> {
+            sendAsync(p_197051_1_);
+        });
+    }
+
+    private void sendAsync(ServerPlayerEntity entityplayer) {
+        // Paper end - Async command map building
         Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
         RootCommandNode vanillaRoot = new RootCommandNode();
 
-        RootCommandNode<CommandSource> vanilla = p_197051_1_.field_71133_b.vanillaCommandDispatcher.func_197054_a().getRoot();
+        RootCommandNode<CommandSource> vanilla = entityplayer.field_71133_b.vanillaCommandDispatcher.func_197054_a().getRoot();
         map.put(vanilla, vanillaRoot);
-        this.func_197052_a(vanilla, vanillaRoot, p_197051_1_.func_195051_bN(), (Map) map);
+        this.func_197052_a(vanilla, vanillaRoot, entityplayer.func_195051_bN(), (Map) map);
 
         // Now build the global commands in a second pass
         RootCommandNode<ISuggestionProvider> rootcommandnode = new RootCommandNode();
 
         map.put(this.field_197062_b.getRoot(), rootcommandnode);
-        this.func_197052_a(this.field_197062_b.getRoot(), rootcommandnode, p_197051_1_.func_195051_bN(), (Map) map);
+        this.func_197052_a(this.field_197062_b.getRoot(), rootcommandnode, entityplayer.func_195051_bN(), (Map) map);
 
         Collection<String> bukkit = new LinkedHashSet<>();
         for (CommandNode node : rootcommandnode.getChildren()) {
             bukkit.add(node.getName());
         }
+        // Paper start - Async command map building
+        MinecraftServer.getServer().execute(() -> {
+           runSync(entityplayer, bukkit, rootcommandnode);
+        });
+    }
 
-        PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_197051_1_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+    private void runSync(ServerPlayerEntity entityplayer, Collection<String> bukkit, RootCommandNode<ISuggestionProvider> rootcommandnode) {
+        // Paper end - Async command map building
+        PlayerCommandSendEvent event = new PlayerCommandSendEvent(entityplayer.getBukkitEntity(), new LinkedHashSet<>(bukkit));
         event.getPlayer().getServer().getPluginManager().callEvent(event);
 
         // Remove labels that were removed during the event
@@ -355,7 +371,7 @@ public class Commands {
             }
         }
         // CraftBukkit end
-        p_197051_1_.field_71135_a.func_147359_a(new SCommandListPacket(rootcommandnode));
+        entityplayer.field_71135_a.func_147359_a(new SCommandListPacket(rootcommandnode));
     }
 
     private void func_197052_a(CommandNode<CommandSource> p_197052_1_, CommandNode<ISuggestionProvider> p_197052_2_, CommandSource p_197052_3_, Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> p_197052_4_) {
