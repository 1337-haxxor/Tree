From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 3 Mar 2016 04:00:11 -0600
Subject: [PATCH] Timings v2


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
new file mode 100644
index 0000000000000000000000000000000000000000..97dae1b76ab6bc7e644925c15328539635196c27
--- /dev/null
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -0,0 +1,155 @@
+package co.aikar.timings;
+
+import Timing;
+import com.google.common.collect.MapMaker;
+import net.minecraft.block.Block;
+import net.minecraft.command.FunctionObject;
+import net.minecraft.entity.Entity;
+import net.minecraft.network.IPacket;
+import net.minecraft.server.*;
+import net.minecraft.tileentity.TileEntity;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.scheduler.BukkitTask;
+
+import org.bukkit.craftbukkit.scheduler.CraftTask;
+
+import java.util.Map;
+
+// TODO: Re-implement missing timers
+public final class MinecraftTimings {
+
+    public static final Timing serverOversleep = Timings.ofSafe("Server Oversleep");
+    public static final Timing playerListTimer = Timings.ofSafe("Player List");
+    public static final Timing commandFunctionsTimer = Timings.ofSafe("Command Functions");
+    public static final Timing connectionTimer = Timings.ofSafe("Connection Handler");
+    public static final Timing tickablesTimer = Timings.ofSafe("Tickables");
+    public static final Timing minecraftSchedulerTimer = Timings.ofSafe("Minecraft Scheduler");
+    public static final Timing bukkitSchedulerTimer = Timings.ofSafe("Bukkit Scheduler");
+    public static final Timing bukkitSchedulerPendingTimer = Timings.ofSafe("Bukkit Scheduler - Pending");
+    public static final Timing bukkitSchedulerFinishTimer = Timings.ofSafe("Bukkit Scheduler - Finishing");
+    public static final Timing chunkIOTickTimer = Timings.ofSafe("ChunkIOTick");
+    public static final Timing timeUpdateTimer = Timings.ofSafe("Time Update");
+    public static final Timing serverCommandTimer = Timings.ofSafe("Server Command");
+    public static final Timing savePlayers = Timings.ofSafe("Save Players");
+
+    public static final Timing tickEntityTimer = Timings.ofSafe("## tickEntity");
+    public static final Timing tickTileEntityTimer = Timings.ofSafe("## tickTileEntity");
+    public static final Timing packetProcessTimer = Timings.ofSafe("## Packet Processing");
+    public static final Timing scheduledBlocksTimer = Timings.ofSafe("## Scheduled Blocks");
+    public static final Timing structureGenerationTimer = Timings.ofSafe("Structure Generation");
+
+    public static final Timing processQueueTimer = Timings.ofSafe("processQueue");
+    public static final Timing processTasksTimer = Timings.ofSafe("processTasks");
+
+    public static final Timing playerCommandTimer = Timings.ofSafe("playerCommand");
+
+    public static final Timing entityActivationCheckTimer = Timings.ofSafe("entityActivationCheck");
+
+    public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
+    public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
+
+    private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
+
+    private MinecraftTimings() {}
+
+    public static Timing getInternalTaskName(String taskName) {
+        return Timings.ofSafe(taskName);
+    }
+
+    /**
+     * Gets a timer associated with a plugins tasks.
+     * @param bukkitTask
+     * @param period
+     * @return
+     */
+    public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
+        if (!bukkitTask.isSync()) {
+            return NullTimingHandler.NULL;
+        }
+        Plugin plugin;
+
+        CraftTask craftTask = (CraftTask) bukkitTask;
+
+        final Class<?> taskClass = craftTask.getTaskClass();
+        if (bukkitTask.getOwner() != null) {
+            plugin = bukkitTask.getOwner();
+        } else {
+            plugin = TimingsManager.getPluginByClassloader(taskClass);
+        }
+
+        final String taskname = taskNameCache.computeIfAbsent(taskClass, clazz -> {
+            try {
+                String clsName = !clazz.isMemberClass()
+                    ? clazz.getName()
+                    : clazz.getCanonicalName();
+                if (clsName != null && clsName.contains("$Lambda$")) {
+                    clsName = clsName.replaceAll("(Lambda\\$.*?)/.*", "$1");
+                }
+                return clsName != null ? clsName : "UnknownTask";
+            } catch (Throwable ex) {
+                new Exception("Error occurred detecting class name", ex).printStackTrace();
+                return "MangledClassFile";
+            }
+        });
+
+        StringBuilder name = new StringBuilder(64);
+        name.append("Task: ").append(taskname);
+        if (period > 0) {
+            name.append(" (interval:").append(period).append(")");
+        } else {
+            name.append(" (Single)");
+        }
+
+        if (plugin == null) {
+            return Timings.ofSafe(null, name.toString());
+        }
+
+        return Timings.ofSafe(plugin, name.toString());
+    }
+
+    /**
+     * Get a named timer for the specified entity type to track type specific timings.
+     * @param entity
+     * @return
+     */
+    public static Timing getEntityTimings(Entity entity) {
+        String entityType = entity.getClass().getName();
+        return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType, tickEntityTimer);
+    }
+
+    /**
+     * Get a named timer for the specified tile entity type to track type specific timings.
+     * @param entity
+     * @return
+     */
+    public static Timing getTileEntityTimings(TileEntity entity) {
+        String entityType = entity.getClass().getName();
+        return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
+    }
+    public static Timing getCancelTasksTimer() {
+        return Timings.ofSafe("Cancel Tasks");
+    }
+    public static Timing getCancelTasksTimer(Plugin plugin) {
+        return Timings.ofSafe(plugin, "Cancel Tasks");
+    }
+
+    public static void stopServer() {
+        TimingsManager.stopServer();
+    }
+
+    public static Timing getBlockTiming(Block block) {
+        return Timings.ofSafe("## Scheduled Block: " + block.toString(), scheduledBlocksTimer);
+    }
+/*
+    public static Timing getStructureTiming(StructureGenerator structureGenerator) {
+        return Timings.ofSafe("Structure Generator - " + structureGenerator.getName(), structureGenerationTimer);
+    }*/
+
+    public static Timing getPacketTiming(IPacket packet) {
+        return Timings.ofSafe("## Packet - " + packet.getClass().getName(), packetProcessTimer);
+    }
+
+    public static Timing getCommandFunctionTiming(FunctionObject function) {
+        return Timings.ofSafe("Command Function - " + function.getMinecraftKey().toString());
+    }
+}
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
new file mode 100644
index 0000000000000000000000000000000000000000..9f240ac075de534722efb2ba2286c010105675b0
--- /dev/null
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -0,0 +1,380 @@
+/*
+ * This file is licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2014 Daniel Ennis <http://aikar.co>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package co.aikar.timings;
+
+import com.google.common.collect.Sets;
+import net.minecraft.server.MinecraftServer;
+import org.apache.commons.lang.StringUtils;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemorySection;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.entity.EntityType;
+import org.json.simple.JSONObject;
+import org.json.simple.JSONValue;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.lang.management.ManagementFactory;
+import java.lang.management.OperatingSystemMXBean;
+import java.lang.management.RuntimeMXBean;
+import java.net.HttpURLConnection;
+import java.net.InetAddress;
+import java.net.URL;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+import java.util.zip.GZIPOutputStream;
+
+import static co.aikar.timings.TimingsManager.HISTORY;
+import static co.aikar.util.JSONUtil.appendObjectData;
+import static co.aikar.util.JSONUtil.createObject;
+import static co.aikar.util.JSONUtil.pair;
+import static co.aikar.util.JSONUtil.toArray;
+import static co.aikar.util.JSONUtil.toArrayMapper;
+import static co.aikar.util.JSONUtil.toObjectMapper;
+
+import TimingHistory;
+import TimingsReportListener;
+
+@SuppressWarnings({"rawtypes", "SuppressionAnnotation"})
+public class TimingsExport extends Thread {
+
+    private final TimingsReportListener listeners;
+    private final Map out;
+    private final TimingHistory[] history;
+    private static long lastReport = 0;
+
+    private TimingsExport(TimingsReportListener listeners, Map out, TimingHistory[] history) {
+        super("Timings paste thread");
+        this.listeners = listeners;
+        this.out = out;
+        this.history = history;
+    }
+
+    /**
+     * Checks if any pending reports are being requested, and builds one if needed.
+     */
+    public static void reportTimings() {
+        if (Timings.requestingReport.isEmpty()) {
+            return;
+        }
+        TimingsReportListener listeners = new TimingsReportListener(Timings.requestingReport);
+        listeners.addConsoleIfNeeded();
+
+        Timings.requestingReport.clear();
+        long now = System.currentTimeMillis();
+        final long lastReportDiff = now - lastReport;
+        if (lastReportDiff < 60000) {
+            listeners.sendMessage(ChatColor.RED + "Please wait at least 1 minute in between Timings reports. (" + (int)((60000 - lastReportDiff) / 1000) + " seconds)");
+            listeners.done();
+            return;
+        }
+        final long lastStartDiff = now - TimingsManager.timingStart;
+        if (lastStartDiff < 180000) {
+            listeners.sendMessage(ChatColor.RED + "Please wait at least 3 minutes before generating a Timings report. Unlike Timings v1, v2 benefits from longer timings and is not as useful with short timings. (" + (int)((180000 - lastStartDiff) / 1000) + " seconds)");
+            listeners.done();
+            return;
+        }
+        listeners.sendMessage(ChatColor.GREEN + "Preparing Timings Report...");
+        lastReport = now;
+        Map parent = createObject(
+            // Get some basic system details about the server
+            pair("version", Bukkit.getVersion()),
+            pair("maxplayers", Bukkit.getMaxPlayers()),
+            pair("start", TimingsManager.timingStart / 1000),
+            pair("end", System.currentTimeMillis() / 1000),
+            pair("online-mode", Bukkit.getServer().getOnlineMode()),
+            pair("sampletime", (System.currentTimeMillis() - TimingsManager.timingStart) / 1000),
+            pair("datapacks", toArrayMapper(MinecraftServer.getServer().func_195561_aH().func_232621_d_(), pack -> {
+                // Don't feel like obf helper'ing these, non fatal if its temp missed.
+                return ChatColor.stripColor(CraftChatMessage.fromComponent(pack.a(true)));
+            }))
+        );
+        if (!TimingsManager.privacy) {
+            appendObjectData(parent,
+                pair("server", Bukkit.getUnsafe().getTimingsServerName()),
+                pair("motd", Bukkit.getServer().getMotd()),
+                pair("icon", Bukkit.getServer().getServerIcon().getData())
+            );
+        }
+
+        final Runtime runtime = Runtime.getRuntime();
+        RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();
+
+        OperatingSystemMXBean osInfo = ManagementFactory.getOperatingSystemMXBean();
+
+        parent.put("system", createObject(
+                pair("timingcost", getCost()),
+                pair("loadavg", osInfo.getSystemLoadAverage()),
+                pair("name", System.getProperty("os.name")),
+                pair("version", System.getProperty("os.version")),
+                pair("jvmversion", System.getProperty("java.version")),
+                pair("arch", System.getProperty("os.arch")),
+                pair("maxmem", runtime.maxMemory()),
+                pair("memory", createObject(
+                    pair("heap", ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().toString()),
+                    pair("nonheap", ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().toString()),
+                    pair("finalizing", ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount())
+                )),
+                pair("cpu", runtime.availableProcessors()),
+                pair("runtime", runtimeBean.getUptime()),
+                pair("flags", StringUtils.join(runtimeBean.getInputArguments(), " ")),
+                pair("gc", toObjectMapper(ManagementFactory.getGarbageCollectorMXBeans(), input -> pair(input.getName(), toArray(input.getCollectionCount(), input.getCollectionTime()))))
+            )
+        );
+
+        parent.put("worlds", toObjectMapper(MinecraftServer.getServer().func_212370_w(), world -> {
+            if (world.getWorldData().getName().equals("worldeditregentempworld")) return null;
+            return pair(world.getWorldData().getName(), createObject(
+                pair("gamerules", toObjectMapper(world.getWorld().getGameRules(), rule -> {
+                    return pair(rule, world.getWorld().getGameRuleValue(rule));
+                })),
+                pair("ticking-distance", world.getChunkProvider().playerChunkMap.getEffectiveViewDistance())
+            ));
+        }));
+
+        Set<Material> tileEntityTypeSet = Sets.newHashSet();
+        Set<EntityType> entityTypeSet = Sets.newHashSet();
+
+        int size = HISTORY.size();
+        TimingHistory[] history = new TimingHistory[size + 1];
+        int i = 0;
+        for (TimingHistory timingHistory : HISTORY) {
+            tileEntityTypeSet.addAll(timingHistory.tileEntityTypeSet);
+            entityTypeSet.addAll(timingHistory.entityTypeSet);
+            history[i++] = timingHistory;
+        }
+
+        history[i] = new TimingHistory(); // Current snapshot
+        tileEntityTypeSet.addAll(history[i].tileEntityTypeSet);
+        entityTypeSet.addAll(history[i].entityTypeSet);
+
+
+        Map handlers = createObject();
+        Map groupData;
+        synchronized (TimingIdentifier.GROUP_MAP) {
+            for (TimingIdentifier.TimingGroup group : TimingIdentifier.GROUP_MAP.values()) {
+                synchronized (group.handlers) {
+                    for (TimingHandler id : group.handlers) {
+
+                        if (!id.isTimed() && !id.isSpecial()) {
+                            continue;
+                        }
+
+                        String name = id.identifier.name;
+                        if (name.startsWith("##")) {
+                            name = name.substring(3);
+                        }
+                        handlers.put(id.id, toArray(
+                            group.id,
+                            name
+                        ));
+                    }
+                }
+            }
+
+            groupData = toObjectMapper(
+                TimingIdentifier.GROUP_MAP.values(), group -> pair(group.id, group.name));
+        }
+
+        parent.put("idmap", createObject(
+            pair("groups", groupData),
+            pair("handlers", handlers),
+            pair("worlds", toObjectMapper(TimingHistory.worldMap.entrySet(), input -> pair(input.getValue(), input.getKey()))),
+            pair("tileentity",
+                toObjectMapper(tileEntityTypeSet, input -> pair(input.ordinal(), input.name()))),
+            pair("entity",
+                toObjectMapper(entityTypeSet, input -> pair(input.ordinal(), input.name())))
+        ));
+
+        // Information about loaded plugins
+
+        parent.put("plugins", toObjectMapper(Bukkit.getPluginManager().getPlugins(),
+                plugin -> pair(plugin.getName(), createObject(
+                    pair("version", plugin.getDescription().getVersion()),
+                    pair("description", String.valueOf(plugin.getDescription().getDescription()).trim()),
+                    pair("website", plugin.getDescription().getWebsite()),
+                    pair("authors", StringUtils.join(plugin.getDescription().getAuthors(), ", "))
+                ))));
+
+
+
+        // Information on the users Config
+
+        parent.put("config", createObject(
+            pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
+            pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+        ));
+
+        new TimingsExport(listeners, parent, history).start();
+    }
+
+    static long getCost() {
+        // Benchmark the users System.nanotime() for cost basis
+        int passes = 100;
+        TimingHandler SAMPLER1 = Timings.ofSafe("Timings Sampler 1");
+        TimingHandler SAMPLER2 = Timings.ofSafe("Timings Sampler 2");
+        TimingHandler SAMPLER3 = Timings.ofSafe("Timings Sampler 3");
+        TimingHandler SAMPLER4 = Timings.ofSafe("Timings Sampler 4");
+        TimingHandler SAMPLER5 = Timings.ofSafe("Timings Sampler 5");
+        TimingHandler SAMPLER6 = Timings.ofSafe("Timings Sampler 6");
+
+        long start = System.nanoTime();
+        for (int i = 0; i < passes; i++) {
+            SAMPLER1.startTiming();
+            SAMPLER2.startTiming();
+            SAMPLER3.startTiming();
+            SAMPLER3.stopTiming();
+            SAMPLER4.startTiming();
+            SAMPLER5.startTiming();
+            SAMPLER6.startTiming();
+            SAMPLER6.stopTiming();
+            SAMPLER5.stopTiming();
+            SAMPLER4.stopTiming();
+            SAMPLER2.stopTiming();
+            SAMPLER1.stopTiming();
+        }
+        long timingsCost = (System.nanoTime() - start) / passes / 6;
+        SAMPLER1.reset(true);
+        SAMPLER2.reset(true);
+        SAMPLER3.reset(true);
+        SAMPLER4.reset(true);
+        SAMPLER5.reset(true);
+        SAMPLER6.reset(true);
+        return timingsCost;
+    }
+
+    private static JSONObject mapAsJSON(ConfigurationSection config, String parentKey) {
+
+        JSONObject object = new JSONObject();
+        for (String key : config.getKeys(false)) {
+            String fullKey = (parentKey != null ? parentKey + "." + key : key);
+            if (fullKey.equals("database") || fullKey.equals("settings.bungeecord-addresses") || TimingsManager.hiddenConfigs.contains(fullKey) || key.startsWith("seed-") || key.equals("worldeditregentempworld")) {
+                continue;
+            }
+            final Object val = config.get(key);
+
+            object.put(key, valAsJSON(val, fullKey));
+        }
+        return object;
+    }
+
+    private static Object valAsJSON(Object val, final String parentKey) {
+        if (!(val instanceof MemorySection)) {
+            if (val instanceof List) {
+                Iterable<Object> v = (Iterable<Object>) val;
+                return toArrayMapper(v, input -> valAsJSON(input, parentKey));
+            } else {
+                return String.valueOf(val);
+            }
+        } else {
+            return mapAsJSON((ConfigurationSection) val, parentKey);
+        }
+    }
+
+    @Override
+    public void run() {
+        out.put("data", toArrayMapper(history, TimingHistory::export));
+
+
+        String response = null;
+        String timingsURL = null;
+        try {
+            HttpURLConnection con = (HttpURLConnection) new URL("http://timings.aikar.co/post").openConnection();
+            con.setDoOutput(true);
+            String hostName = "BrokenHost";
+            try {
+                hostName = InetAddress.getLocalHost().getHostName();
+            } catch (Exception ignored) {}
+            con.setRequestProperty("User-Agent", "Paper/" + Bukkit.getUnsafe().getTimingsServerName() + "/" + hostName);
+            con.setRequestMethod("POST");
+            con.setInstanceFollowRedirects(false);
+
+            OutputStream request = new GZIPOutputStream(con.getOutputStream()) {{
+                this.def.setLevel(7);
+            }};
+
+            request.write(JSONValue.toJSONString(out).getBytes("UTF-8"));
+            request.close();
+
+            response = getResponse(con);
+
+            if (con.getResponseCode() != 302) {
+                listeners.sendMessage(
+                    ChatColor.RED + "Upload Error: " + con.getResponseCode() + ": " + con.getResponseMessage());
+                listeners.sendMessage(ChatColor.RED + "Check your logs for more information");
+                if (response != null) {
+                    Bukkit.getLogger().log(Level.SEVERE, response);
+                }
+                return;
+            }
+
+            timingsURL = con.getHeaderField("Location");
+            listeners.sendMessage(ChatColor.GREEN + "View Timings Report: " + timingsURL);
+
+            if (response != null && !response.isEmpty()) {
+                Bukkit.getLogger().log(Level.INFO, "Timing Response: " + response);
+            }
+        } catch (IOException ex) {
+            listeners.sendMessage(ChatColor.RED + "Error uploading timings, check your logs for more information");
+            if (response != null) {
+                Bukkit.getLogger().log(Level.SEVERE, response);
+            }
+            Bukkit.getLogger().log(Level.SEVERE, "Could not paste timings", ex);
+        } finally {
+            this.listeners.done(timingsURL);
+        }
+    }
+
+    private String getResponse(HttpURLConnection con) throws IOException {
+        InputStream is = null;
+        try {
+            is = con.getInputStream();
+            ByteArrayOutputStream bos = new ByteArrayOutputStream();
+
+            byte[] b = new byte[1024];
+            int bytesRead;
+            while ((bytesRead = is.read(b)) != -1) {
+                bos.write(b, 0, bytesRead);
+            }
+            return bos.toString();
+
+        } catch (IOException ex) {
+            listeners.sendMessage(ChatColor.RED + "Error uploading timings, check your logs for more information");
+            Bukkit.getLogger().log(Level.WARNING, con.getResponseMessage(), ex);
+            return null;
+        } finally {
+            if (is != null) {
+                is.close();
+            }
+        }
+    }
+}
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..db5fe00fede07b582513741c25445d2081da8b61
--- /dev/null
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -0,0 +1,120 @@
+package co.aikar.timings;
+
+import Timing;
+import net.minecraft.world.World;
+import net.minecraft.world.server.ServerWorld;
+import net.minecraft.world.storage.ServerWorldInfo;
+
+/**
+ * Set of timers per world, to track world specific timings.
+ */
+// TODO: Re-implement missing timers
+public class WorldTimingsHandler {
+    public final Timing mobSpawn;
+    public final Timing doChunkUnload;
+    public final Timing doPortalForcer;
+    public final Timing scheduledBlocks;
+    public final Timing scheduledBlocksCleanup;
+    public final Timing scheduledBlocksTicking;
+    public final Timing chunkTicks;
+    public final Timing lightChunk;
+    public final Timing chunkTicksBlocks;
+    public final Timing doVillages;
+    public final Timing doChunkMap;
+    public final Timing doChunkMapUpdate;
+    public final Timing doChunkMapToUpdate;
+    public final Timing doChunkMapSortMissing;
+    public final Timing doChunkMapSortSendToPlayers;
+    public final Timing doChunkMapPlayersNeedingChunks;
+    public final Timing doChunkMapPendingSendToPlayers;
+    public final Timing doChunkMapUnloadChunks;
+    public final Timing doChunkGC;
+    public final Timing doSounds;
+    public final Timing entityRemoval;
+    public final Timing entityTick;
+    public final Timing tileEntityTick;
+    public final Timing tileEntityPending;
+    public final Timing tracker1;
+    public final Timing tracker2;
+    public final Timing doTick;
+    public final Timing tickEntities;
+    public final Timing chunks;
+    public final Timing newEntities;
+    public final Timing raids;
+    public final Timing chunkProviderTick;
+    public final Timing broadcastChunkUpdates;
+    public final Timing countNaturalMobs;
+
+    public final Timing chunkLoad;
+    public final Timing chunkLoadPopulate;
+    public final Timing syncChunkLoad;
+    public final Timing chunkLoadLevelTimer;
+    public final Timing chunkIO;
+    public final Timing chunkPostLoad;
+    public final Timing worldSave;
+    public final Timing worldSaveChunks;
+    public final Timing worldSaveLevel;
+    public final Timing chunkSaveData;
+
+
+    public final Timing miscMobSpawning;
+
+    public WorldTimingsHandler(World server) {
+        String name = ((ServerWorldInfo) server.func_72912_H()).func_76065_j() + " - ";
+
+        mobSpawn = Timings.ofSafe(name + "mobSpawn");
+        doChunkUnload = Timings.ofSafe(name + "doChunkUnload");
+        scheduledBlocks = Timings.ofSafe(name + "Scheduled Blocks");
+        scheduledBlocksCleanup = Timings.ofSafe(name + "Scheduled Blocks - Cleanup");
+        scheduledBlocksTicking = Timings.ofSafe(name + "Scheduled Blocks - Ticking");
+        chunkTicks = Timings.ofSafe(name + "Chunk Ticks");
+        lightChunk = Timings.ofSafe(name + "Light Chunk");
+        chunkTicksBlocks = Timings.ofSafe(name + "Chunk Ticks - Blocks");
+        doVillages = Timings.ofSafe(name + "doVillages");
+        doChunkMap = Timings.ofSafe(name + "doChunkMap");
+        doChunkMapUpdate = Timings.ofSafe(name + "doChunkMap - Update");
+        doChunkMapToUpdate = Timings.ofSafe(name + "doChunkMap - To Update");
+        doChunkMapSortMissing = Timings.ofSafe(name + "doChunkMap - Sort Missing");
+        doChunkMapSortSendToPlayers = Timings.ofSafe(name + "doChunkMap - Sort Send To Players");
+        doChunkMapPlayersNeedingChunks = Timings.ofSafe(name + "doChunkMap - Players Needing Chunks");
+        doChunkMapPendingSendToPlayers = Timings.ofSafe(name + "doChunkMap - Pending Send To Players");
+        doChunkMapUnloadChunks = Timings.ofSafe(name + "doChunkMap - Unload Chunks");
+        doSounds = Timings.ofSafe(name + "doSounds");
+        doChunkGC = Timings.ofSafe(name + "doChunkGC");
+        doPortalForcer = Timings.ofSafe(name + "doPortalForcer");
+        entityTick = Timings.ofSafe(name + "entityTick");
+        entityRemoval = Timings.ofSafe(name + "entityRemoval");
+        tileEntityTick = Timings.ofSafe(name + "tileEntityTick");
+        tileEntityPending = Timings.ofSafe(name + "tileEntityPending");
+
+        chunkLoad = Timings.ofSafe(name + "Chunk Load");
+        chunkLoadPopulate = Timings.ofSafe(name + "Chunk Load - Populate");
+        syncChunkLoad = Timings.ofSafe(name + "Sync Chunk Load");
+        chunkLoadLevelTimer = Timings.ofSafe(name + "Chunk Load - Load Level");
+        chunkIO = Timings.ofSafe(name + "Chunk Load - DiskIO");
+        chunkPostLoad = Timings.ofSafe(name + "Chunk Load - Post Load");
+        worldSave = Timings.ofSafe(name + "World Save");
+        worldSaveLevel = Timings.ofSafe(name + "World Save - Level");
+        worldSaveChunks = Timings.ofSafe(name + "World Save - Chunks");
+        chunkSaveData = Timings.ofSafe(name + "Chunk Save - Data");
+
+        tracker1 = Timings.ofSafe(name + "tracker stage 1");
+        tracker2 = Timings.ofSafe(name + "tracker stage 2");
+        doTick = Timings.ofSafe(name + "doTick");
+        tickEntities = Timings.ofSafe(name + "tickEntities");
+
+        chunks = Timings.ofSafe(name + "Chunks");
+        newEntities = Timings.ofSafe(name + "New entity registration");
+        raids = Timings.ofSafe(name + "Raids");
+        chunkProviderTick = Timings.ofSafe(name + "Chunk provider tick");
+        broadcastChunkUpdates = Timings.ofSafe(name + "Broadcast chunk updates");
+        countNaturalMobs = Timings.ofSafe(name + "Count natural mobs");
+
+
+        miscMobSpawning = Timings.ofSafe(name + "Mob spawning - Misc");
+    }
+
+    public static Timing getTickList(ServerWorld worldserver, String timingsType) {
+        return Timings.ofSafe(((ServerWorldInfo) worldserver.func_72912_H()).func_76065_j() + " - Scheduled " + timingsType);
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index b367bb8ea184489f433f8acc798466c38816ae62..a62f4bbb973b9cb6d1ee53f56a0897d70ae176af 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -14,12 +14,15 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
 
+import com.google.common.collect.Lists;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import co.aikar.timings.Timings;
+import co.aikar.timings.TimingsManager;
 
 public class PaperConfig {
 
@@ -188,4 +191,27 @@ public class PaperConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static String timingsServerName;
+    private static void timings() {
+        boolean timings = getBoolean("timings.enabled", true);
+        boolean verboseTimings = getBoolean("timings.verbose", true);
+        TimingsManager.privacy = getBoolean("timings.server-name-privacy", false);
+        TimingsManager.hiddenConfigs = getList("timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses"));
+        int timingHistoryInterval = getInt("timings.history-interval", 300);
+        int timingHistoryLength = getInt("timings.history-length", 3600);
+        timingsServerName = getString("timings.server-name", "Unknown Server");
+
+
+        Timings.setVerboseTimingsEnabled(verboseTimings);
+        Timings.setTimingsEnabled(timings);
+        Timings.setHistoryInterval(timingHistoryInterval * 20);
+        Timings.setHistoryLength(timingHistoryLength * 20);
+
+        log("Timings: " + timings +
+                " - Verbose: " + verboseTimings +
+                " - Interval: " + timeSummary(Timings.getHistoryInterval() / 20) +
+                " - Length: " + timeSummary(Timings.getHistoryLength() / 20) +
+                " - Server Name: " + timingsServerName);
+    }
 }
diff --git a/src/main/java/net/minecraft/advancements/FunctionManager.java b/src/main/java/net/minecraft/advancements/FunctionManager.java
index 129af53631a1e043cb0d3cda98a486231553ad86..6071b0d71a2bb6f676b7ce65eeb298f45c55ec8f 100644
--- a/src/main/java/net/minecraft/advancements/FunctionManager.java
+++ b/src/main/java/net/minecraft/advancements/FunctionManager.java
@@ -76,7 +76,7 @@ public class FunctionManager {
         } else {
             int j;
 
-            try {
+            try (co.aikar.timings.Timing timing = p_195447_1_.getTiming().startTiming()) { // Paper
                 this.field_194021_h = true;
                 int k = 0;
                 FunctionObject.IEntry[] acustomfunction_c = p_195447_1_.func_193528_a();
diff --git a/src/main/java/net/minecraft/block/Block.java b/src/main/java/net/minecraft/block/Block.java
index 23a7bb9d4d2cc122d4fb8d97c7c763f907d2e534..f1366337acee258f172de574b5b480ea4d6eb6fc 100644
--- a/src/main/java/net/minecraft/block/Block.java
+++ b/src/main/java/net/minecraft/block/Block.java
@@ -60,6 +60,15 @@ public class Block extends AbstractBlock implements IItemProvider {
     private static final VoxelShape field_220084_c = func_208617_a(7.0D, 0.0D, 7.0D, 9.0D, 10.0D, 9.0D);
     protected final StateContainer<Block, BlockState> field_176227_L;
     private BlockState field_196275_y;
+    // Paper start
+    public co.aikar.timings.Timing timing;
+    public co.aikar.timings.Timing getTiming() {
+        if (timing == null) {
+            timing = co.aikar.timings.MinecraftTimings.getBlockTiming(this);
+        }
+        return timing;
+    }
+    // Paper end
     @Nullable
     private String field_149770_b;
     @Nullable
diff --git a/src/main/java/net/minecraft/command/FunctionObject.java b/src/main/java/net/minecraft/command/FunctionObject.java
index 02b0a49200afd02bdaa4a002bc1b36deabc23431..d18a1869be726a2d3b51f3992cb41dc0cbc56404 100644
--- a/src/main/java/net/minecraft/command/FunctionObject.java
+++ b/src/main/java/net/minecraft/command/FunctionObject.java
@@ -15,12 +15,22 @@ public class FunctionObject {
 
     private final FunctionObject.IEntry[] field_193530_b;
     private final ResourceLocation field_197002_b;
+    // Paper start
+    public co.aikar.timings.Timing timing;
+    public co.aikar.timings.Timing getTiming() {
+        if (timing == null) {
+            timing = co.aikar.timings.MinecraftTimings.getCommandFunctionTiming(this);
+        }
+        return timing;
+    }
+    // Paper end
 
     public FunctionObject(ResourceLocation minecraftkey, FunctionObject.IEntry[] acustomfunction_c) {
         this.field_197002_b = minecraftkey;
         this.field_193530_b = acustomfunction_c;
     }
 
+    public final ResourceLocation getMinecraftKey() { return this.func_197001_a(); } // Paper - OBFHELPER
     public ResourceLocation func_197001_a() {
         return this.field_197002_b;
     }
diff --git a/src/main/java/net/minecraft/entity/Entity.java b/src/main/java/net/minecraft/entity/Entity.java
index 2e0196d34b9582972ad86a1ce3ad71574c8c7eb3..3ac41899cccd35d620c050a8fe241241b6316bcf 100644
--- a/src/main/java/net/minecraft/entity/Entity.java
+++ b/src/main/java/net/minecraft/entity/Entity.java
@@ -118,7 +118,8 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Vehicle;
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
 import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
@@ -254,7 +255,7 @@ public abstract class Entity implements INameable, ICommandSource, KeyedObject {
     public boolean valid;
     public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
     public boolean forceExplosionKnockback; // SPIGOT-949
-    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getEntityTimings(this); // Spigot
+    public Timing tickTimer = MinecraftTimings.getEntityTimings(this); // Paper
     // Spigot start
     public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
     public final boolean defaultActivationState;
@@ -615,7 +616,6 @@ public abstract class Entity implements INameable, ICommandSource, KeyedObject {
     }
 
     public void func_213315_a(MoverType p_213315_1_, Vector3d p_213315_2_) {
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.startTiming(); // Spigot
         if (this.field_70145_X) {
             this.func_174826_a(this.func_174813_aQ().func_191194_a(p_213315_2_));
             this.func_174829_m();
@@ -752,7 +752,6 @@ public abstract class Entity implements INameable, ICommandSource, KeyedObject {
 
             this.field_70170_p.func_217381_Z().func_76319_b();
         }
-        org.bukkit.craftbukkit.SpigotTimings.entityMoveTimer.stopTiming(); // Spigot
     }
 
     protected BlockPos func_226268_ag_() {
diff --git a/src/main/java/net/minecraft/entity/LivingEntity.java b/src/main/java/net/minecraft/entity/LivingEntity.java
index d09e23b183783b316fbd36e82e2e6e4abb6eea55..d10a3f794ad8d94cca1ed6cf30a0ead481124f7a 100644
--- a/src/main/java/net/minecraft/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/entity/LivingEntity.java
@@ -134,7 +134,7 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class LivingEntity extends Entity {
 
@@ -2426,7 +2426,6 @@ public abstract class LivingEntity extends Entity {
 
     @Override
     public void func_70071_h_() {
-        SpigotTimings.timerEntityBaseTick.startTiming(); // Spigot
         super.func_70071_h_();
         this.func_184608_ct();
         this.func_205014_p();
@@ -2475,9 +2474,7 @@ public abstract class LivingEntity extends Entity {
             }
         }
 
-        SpigotTimings.timerEntityBaseTick.stopTiming(); // Spigot
         this.func_70636_d();
-        SpigotTimings.timerEntityTickRest.startTiming(); // Spigot
         double d0 = this.func_226277_ct_() - this.field_70169_q;
         double d1 = this.func_226281_cx_() - this.field_70166_s;
         float f = (float) (d0 * d0 + d1 * d1);
@@ -2557,8 +2554,6 @@ public abstract class LivingEntity extends Entity {
         if (this.func_70608_bn()) {
             this.field_70125_A = 0.0F;
         }
-
-        SpigotTimings.timerEntityTickRest.stopTiming(); // Spigot
     }
 
     private void func_241353_q_() {
@@ -2740,7 +2735,6 @@ public abstract class LivingEntity extends Entity {
 
         this.func_213293_j(d4, d5, d6);
         this.field_70170_p.func_217381_Z().func_76320_a("ai");
-        SpigotTimings.timerEntityAI.startTiming(); // Spigot
         if (this.func_70610_aX()) {
             this.field_70703_bu = false;
             this.field_70702_br = 0.0F;
@@ -2750,7 +2744,6 @@ public abstract class LivingEntity extends Entity {
             this.func_70626_be();
             this.field_70170_p.func_217381_Z().func_76319_b();
         }
-        SpigotTimings.timerEntityAI.stopTiming(); // Spigot
 
         this.field_70170_p.func_217381_Z().func_76319_b();
         this.field_70170_p.func_217381_Z().func_76320_a("jump");
@@ -2785,9 +2778,7 @@ public abstract class LivingEntity extends Entity {
         this.func_184616_r();
         AxisAlignedBB axisalignedbb = this.func_174813_aQ();
 
-        SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
         this.func_213352_e(new Vector3d((double) this.field_70702_br, (double) this.field_70701_bs, (double) this.field_191988_bg));
-        SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
         this.field_70170_p.func_217381_Z().func_76319_b();
         this.field_70170_p.func_217381_Z().func_76320_a("push");
         if (this.field_204807_bs > 0) {
@@ -2795,9 +2786,7 @@ public abstract class LivingEntity extends Entity {
             this.func_204801_a(axisalignedbb, this.func_174813_aQ());
         }
 
-        SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
         this.func_85033_bc();
-        SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         this.field_70170_p.func_217381_Z().func_76319_b();
         if (!this.field_70170_p.field_72995_K && this.func_230270_dK_() && this.func_203008_ap()) {
             this.func_70097_a(DamageSource.field_76369_e, 1.0F);
diff --git a/src/main/java/net/minecraft/network/PacketThreadUtil.java b/src/main/java/net/minecraft/network/PacketThreadUtil.java
index 33a455be591624c2b9141483bb8e4f244678a15a..e8e0651d5f93a55652d39398818d51d45a72bcf0 100644
--- a/src/main/java/net/minecraft/network/PacketThreadUtil.java
+++ b/src/main/java/net/minecraft/network/PacketThreadUtil.java
@@ -1,11 +1,13 @@
 package net.minecraft.network;
 
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import net.minecraft.network.play.ServerPlayNetHandler;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.concurrent.ThreadTaskExecutor;
 import net.minecraft.world.server.ServerWorld;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class PacketThreadUtil {
 
@@ -17,10 +19,13 @@ public class PacketThreadUtil {
 
     public static <T extends INetHandler> void func_218797_a(IPacket<T> p_218797_0_, T p_218797_1_, ThreadTaskExecutor<?> p_218797_2_) throws ThreadQuickExitException {
         if (!p_218797_2_.func_213162_bc()) {
+            Timing timing = MinecraftTimings.getPacketTiming(p_218797_0_); // Paper - timings
             p_218797_2_.execute(() -> {
                 if (MinecraftServer.getServer().hasStopped() || (p_218797_1_ instanceof ServerPlayNetHandler && ((ServerPlayNetHandler) p_218797_1_).processedDisconnect)) return; // CraftBukkit, MC-142590
                 if (p_218797_1_.func_147298_b().func_150724_d()) {
+                    try (Timing ignored = timing.startTiming()) { // Paper - timings
                     p_218797_0_.func_148833_a(p_218797_1_);
+                    } // Paper - timings
                 } else {
                     PacketThreadUtil.field_225384_a.debug("Ignoring packet due to disconnection: " + p_218797_0_);
                 }
diff --git a/src/main/java/net/minecraft/network/play/ServerPlayNetHandler.java b/src/main/java/net/minecraft/network/play/ServerPlayNetHandler.java
index 8da28147008a207bc5e32ec6fcccd6da19b3ad19..7d25d9693249f08627d9056e809678fc14ef68f7 100644
--- a/src/main/java/net/minecraft/network/play/ServerPlayNetHandler.java
+++ b/src/main/java/net/minecraft/network/play/ServerPlayNetHandler.java
@@ -199,6 +199,7 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
+import co.aikar.timings.MinecraftTimings; // Paper
 // CraftBukkit end
 
 public class ServerPlayNetHandler implements IServerPlayNetHandler {
@@ -276,7 +277,6 @@ public class ServerPlayNetHandler implements IServerPlayNetHandler {
     // CraftBukkit end
 
     public void func_73660_a() {
-        org.bukkit.craftbukkit.SpigotTimings.playerConnectionTimer.startTiming(); // Spigot
         this.func_184342_d();
         this.field_147369_b.field_70169_q = this.field_147369_b.func_226277_ct_();
         this.field_147369_b.field_70167_r = this.field_147369_b.func_226278_cu_();
@@ -352,7 +352,6 @@ public class ServerPlayNetHandler implements IServerPlayNetHandler {
             this.field_147369_b.func_143004_u(); // CraftBukkit - SPIGOT-854
             this.func_194028_b(new TranslationTextComponent("multiplayer.disconnect.idling"));
         }
-        org.bukkit.craftbukkit.SpigotTimings.playerConnectionTimer.stopTiming(); // Spigot
 
     }
 
@@ -1825,7 +1824,7 @@ public class ServerPlayNetHandler implements IServerPlayNetHandler {
     // CraftBukkit end
 
     private void func_147361_d(String p_147361_1_) {
-        org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.startTiming(); // Spigot
+        MinecraftTimings.playerCommandTimer.startTiming(); // Paper
         // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
         this.field_147370_c.info(this.field_147369_b.func_195047_I_() + " issued server command: " + p_147361_1_);
@@ -1836,7 +1835,7 @@ public class ServerPlayNetHandler implements IServerPlayNetHandler {
         this.server.getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
-            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
             return;
         }
 
@@ -1849,7 +1848,7 @@ public class ServerPlayNetHandler implements IServerPlayNetHandler {
             java.util.logging.Logger.getLogger(ServerPlayNetHandler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
             return;
         } finally {
-            org.bukkit.craftbukkit.SpigotTimings.playerCommandTimer.stopTiming(); // Spigot
+            MinecraftTimings.playerCommandTimer.stopTiming(); // Paper
         }
         // this.minecraftServer.getCommandDispatcher().a(this.player.getCommandListener(), s);
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 93babd4376bb5e9027cf8f3c1be1a5f97ed5dcd5..5f6bd2f652c757ca233f3d67ffd80b1e1616d362 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -171,7 +171,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.Main;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 import org.spigotmc.SlackActivityAccountant; // Spigot
 
 public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask> implements ISnooperInfo, ICommandSource, AutoCloseable {
@@ -225,8 +225,8 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
     private long field_147142_T;
     public final Thread field_175590_aa;
     private long field_211151_aa;
-    private long field_213213_ab;
-    private boolean field_213214_ac;
+    private long field_213213_ab;final long getTickOversleepMaxTime() { return this.field_213213_ab; } // Paper - OBFHELPER
+    private boolean field_213214_ac; final boolean hasExecutedTask() { return this.field_213214_ac; } // Paper - OBFHELPER
     private final ResourcePackList<ResourcePackInfo> field_195577_ad;
     private final ServerScoreboard field_200255_ai;
     @Nullable
@@ -818,6 +818,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         }
         // CraftBukkit end
         MinecraftServer.field_147145_h.info("Stopping server");
+        MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
             this.server.disablePlugins();
@@ -1015,9 +1016,21 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
 
     private boolean func_212379_aT() {
         // CraftBukkit start
+        if (isOversleep) return canOversleep();// Paper - because of our changes, this logic is broken
         return this.forceTicks || this.func_213182_bg() || Util.func_211177_b() < (this.field_213214_ac ? this.field_213213_ab : this.field_211151_aa);
     }
 
+    // Paper start
+    boolean isOversleep = false;
+    private boolean canOversleep() {
+        return this.hasExecutedTask() && Util.func_211177_b() < this.getTickOversleepMaxTime();
+    }
+
+    private boolean canSleepForTickNoOversleep() {
+        return this.forceTicks || this.func_213182_bg() || Util.func_211177_b() < this.field_211151_aa;
+    }
+    // Paper end
+
     private void executeModerately() {
         this.func_213160_bf();
         java.util.concurrent.locks.LockSupport.parkNanos("executing tasks", 1000L);
@@ -1025,9 +1038,9 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
     // CraftBukkit end
 
     protected void func_213202_o() {
-        this.func_213160_bf();
+        //this.executeAll(); // Paper - move this into the tick method for timings
         this.func_213161_c(() -> {
-            return !this.func_212379_aT();
+            return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
         });
     }
 
@@ -1110,10 +1123,18 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
     protected void func_71240_o() {}
 
     protected void func_71217_p(BooleanSupplier p_71217_1_) {
-        SpigotTimings.serverTickTimer.startTiming(); // Spigot
+        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
         this.slackActivityAccountant.tickStarted(); // Spigot
         long i = Util.func_211178_c();
 
+        // Paper start - move oversleep into full server tick
+        isOversleep = true;MinecraftTimings.serverOversleep.startTiming();
+        this.func_213161_c(() -> {
+            return !this.canOversleep();
+        });
+        isOversleep = false;MinecraftTimings.serverOversleep.stopTiming();
+        // Paper end
+
         ++this.field_71315_w;
         this.func_71190_q(p_71217_1_);
         if (i - this.field_147142_T >= 5000000000L) {
@@ -1131,14 +1152,12 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         }
 
         if (autosavePeriod > 0 && this.field_71315_w % autosavePeriod == 0) { // CraftBukkit
-            SpigotTimings.worldSaveTimer.startTiming(); // Spigot
             MinecraftServer.field_147145_h.debug("Autosave started");
             this.field_71304_b.func_76320_a("save");
             this.field_71318_t.func_72389_g();
             this.func_213211_a(true, false, false);
             this.field_71304_b.func_76319_b();
             MinecraftServer.field_147145_h.debug("Autosave finished");
-            SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
         }
 
         this.field_71304_b.func_76320_a("snooper");
@@ -1151,6 +1170,13 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         }
 
         this.field_71304_b.func_76319_b();
+
+        // Paper start - move executeAll() into full server tick timing
+        try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
+            this.func_213160_bf();
+        }
+        // Paper end
+
         this.field_71304_b.func_76320_a("tallying");
         long l = this.field_71311_j[this.field_71315_w % 100] = Util.func_211178_c() - i;
 
@@ -1161,30 +1187,29 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         this.field_71304_b.func_76319_b();
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
-        SpigotTimings.serverTickTimer.stopTiming(); // Spigot
-        org.spigotmc.CustomTimingsHandler.tick(); // Spigot
+        co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
     protected void func_71190_q(BooleanSupplier p_71190_1_) {
-        SpigotTimings.schedulerTimer.startTiming(); // Spigot
+        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Spigot // Paper
         this.server.getScheduler().mainThreadHeartbeat(this.field_71315_w); // CraftBukkit
-        SpigotTimings.schedulerTimer.stopTiming(); // Spigot
+        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
         this.field_71304_b.func_76320_a("commandFunctions");
-        SpigotTimings.commandFunctionsTimer.startTiming(); // Spigot
+        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
         this.func_193030_aL().func_73660_a();
-        SpigotTimings.commandFunctionsTimer.stopTiming(); // Spigot
+        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         this.field_71304_b.func_219895_b("levels");
         Iterator iterator = this.func_212370_w().iterator();
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        SpigotTimings.processQueueTimer.startTiming(); // Spigot
+        MinecraftTimings.processQueueTimer.startTiming(); // Spigot
         while (!processQueue.isEmpty()) {
             processQueue.remove().run();
         }
-        SpigotTimings.processQueueTimer.stopTiming(); // Spigot
+        MinecraftTimings.processQueueTimer.stopTiming(); // Spigot
 
-        SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
+        MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.field_71315_w % 20 == 0) {
             for (int i = 0; i < this.func_184103_al().field_72404_b.size(); ++i) {
@@ -1192,7 +1217,7 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
                 entityplayer.field_71135_a.func_147359_a(new SUpdateTimePacket(entityplayer.field_70170_p.func_82737_E(), entityplayer.getPlayerTime(), entityplayer.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223607_j))); // Add support for per player time
             }
         }
-        SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
+        MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper
 
         while (iterator.hasNext()) {
             ServerWorld worldserver = (ServerWorld) iterator.next();
@@ -1233,24 +1258,24 @@ public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask
         }
 
         this.field_71304_b.func_219895_b("connection");
-        SpigotTimings.connectionTimer.startTiming(); // Spigot
+        MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.func_147137_ag().func_151269_c();
-        SpigotTimings.connectionTimer.stopTiming(); // Spigot
+        MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.field_71304_b.func_219895_b("players");
-        SpigotTimings.playerListTimer.startTiming(); // Spigot
+        MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
         this.field_71318_t.func_72374_b();
-        SpigotTimings.playerListTimer.stopTiming(); // Spigot
+        MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
         if (SharedConstants.field_206244_b) {
             TestCollection.field_229570_a_.func_229574_b_();
         }
 
         this.field_71304_b.func_219895_b("server gui refresh");
 
-        SpigotTimings.tickablesTimer.startTiming(); // Spigot
+        MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.field_71322_p.size(); ++i) {
             ((Runnable) this.field_71322_p.get(i)).run();
         }
-        SpigotTimings.tickablesTimer.stopTiming(); // Spigot
+        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
         this.field_71304_b.func_76319_b();
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 53632722eddb8195862c30d56db7751424ae8319..f3f948da752ab6ed45d45e62bdf32f01b2eaa208 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -65,7 +65,7 @@ import org.apache.logging.log4j.Level;
 
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.LoggerOutputStream;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
@@ -418,7 +418,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
     }
 
     public void func_71333_ah() {
-        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
+        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
         while (!this.field_71341_l.isEmpty()) {
             PendingCommand servercommand = (PendingCommand) this.field_71341_l.remove(0);
 
@@ -433,7 +433,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
             // CraftBukkit end
         }
 
-        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
+        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     @Override
@@ -664,6 +664,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
 
     @Override
     public String func_71252_i(String p_71252_1_) {
+        Waitable[] waitableArray = new Waitable[1];
         this.field_184115_n.func_70007_b();
         this.func_213167_f(() -> {
             // CraftBukkit start - fire RemoteServerCommandEvent
@@ -672,10 +673,39 @@ public class DedicatedServer extends MinecraftServer implements IServer {
             if (event.isCancelled()) {
                 return;
             }
+            // Paper start
+            if (p_71252_1_.toLowerCase().startsWith("timings") && p_71252_1_.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+                org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+                Waitable<String> waitable = new Waitable<String>() {
+                    @Override
+                    protected String evaluate() {
+                        return sender.getBuffer();
+                    }
+                };
+                waitableArray[0] = waitable;
+                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+            } else {
+            // Paper end
             PendingCommand serverCommand = new PendingCommand(event.getCommand(), field_184115_n.func_195540_f());
             server.dispatchServerCommand(remoteConsole, serverCommand);
+            } // Paper
             // CraftBukkit end
         });
+        // Paper start
+        if (waitableArray[0] != null) {
+            //noinspection unchecked
+            Waitable<String> waitable = waitableArray[0];
+            try {
+                return waitable.get();
+            } catch (java.util.concurrent.ExecutionException e) {
+                throw new RuntimeException("Exception processing rcon command " + p_71252_1_, e.getCause());
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt(); // Maintain interrupted state
+                throw new RuntimeException("Interrupted processing rcon command " + p_71252_1_, e);
+            }
+
+        }
+        // Paper end
         return this.field_184115_n.func_70008_c();
     }
 
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index bbb1e4c0747f7b949577096d29c4a14daf565a3a..ec467d1b39a71a8055b1b3fd67dd7640fc691376 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.management;
 
+import co.aikar.timings.MinecraftTimings;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -1006,10 +1007,11 @@ public abstract class PlayerList {
     }
 
     public void func_72389_g() {
+        MinecraftTimings.savePlayers.startTiming(); // Paper
         for (int i = 0; i < this.field_72404_b.size(); ++i) {
             this.func_72391_b((ServerPlayerEntity) this.field_72404_b.get(i));
         }
-
+        MinecraftTimings.savePlayers.stopTiming(); // Paper
     }
 
     public WhiteList func_152599_k() {
diff --git a/src/main/java/net/minecraft/tileentity/TileEntity.java b/src/main/java/net/minecraft/tileentity/TileEntity.java
index 4fe8079efe30eaf53514296b647e4bdf3c0cb83b..5f033f9093eef960b24f62e855014133459a00e6 100644
--- a/src/main/java/net/minecraft/tileentity/TileEntity.java
+++ b/src/main/java/net/minecraft/tileentity/TileEntity.java
@@ -21,11 +21,12 @@ import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 
 public abstract class TileEntity implements KeyedObject { // Paper
 
-    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getTileEntityTimings(this); // Spigot
+    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
     // CraftBukkit start - data containers
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
     public CraftPersistentDataContainer persistentDataContainer;
diff --git a/src/main/java/net/minecraft/world/World.java b/src/main/java/net/minecraft/world/World.java
index 9a046d80519ff72c96093322dfd2f0cf1ffa4107..ad98a033b837e105c79985337792eab3619144ed 100644
--- a/src/main/java/net/minecraft/world/World.java
+++ b/src/main/java/net/minecraft/world/World.java
@@ -71,7 +71,6 @@ import org.apache.logging.log4j.Logger;
 import java.util.HashMap;
 import java.util.Map;
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CapturedBlockState;
@@ -133,7 +132,7 @@ public abstract class World implements IWorld, AutoCloseable {
 
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
 
-    public final SpigotTimings.WorldTimingsHandler timings; // Spigot
+    public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
@@ -212,7 +211,7 @@ public abstract class World implements IWorld, AutoCloseable {
             public void func_177695_c(WorldBorder p_177695_1_, double p_177695_2_) {}
         });
         // CraftBukkit end
-        timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+        timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
         this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
         this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
     }
@@ -834,15 +833,14 @@ public abstract class World implements IWorld, AutoCloseable {
         }
 
         timings.tileEntityPending.stopTiming(); // Spigot
+        co.aikar.timings.TimingHistory.tileEntityTicks += this.field_175730_i.size(); // Paper
         gameprofilerfiller.func_76319_b();
         spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
     public void func_217390_a(Consumer<Entity> p_217390_1_, Entity p_217390_2_) {
         try {
-            SpigotTimings.tickEntityTimer.startTiming(); // Spigot
             p_217390_1_.accept(p_217390_2_);
-            SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.func_85055_a(throwable, "Ticking entity");
             CrashReportCategory crashreportsystemdetails = crashreport.func_85058_a("Entity being ticked");
diff --git a/src/main/java/net/minecraft/world/chunk/Chunk.java b/src/main/java/net/minecraft/world/chunk/Chunk.java
index 2dbad1f6170432c635a3e25a5519f9350b37c1d0..25bc54587003db4eb7f2c88edd5d46975bf18d10 100644
--- a/src/main/java/net/minecraft/world/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/chunk/Chunk.java
@@ -731,6 +731,7 @@ public class Chunk implements IChunk {
             server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
 
             if (this.needsDecoration) {
+                try (co.aikar.timings.Timing ignored = this.field_76637_e.timings.chunkLoadPopulate.startTiming()) { // Paper
                 this.needsDecoration = false;
                 java.util.Random random = new java.util.Random();
                 random.setSeed(field_76637_e.func_72905_C());
@@ -750,6 +751,7 @@ public class Chunk implements IChunk {
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+                } // Paper
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
index 42f7523f903b7cae75ed18b441270d3ff06db0a6..f8149cad69082ad604a74f9111a063548f608ee0 100644
--- a/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/chunk/storage/ChunkSerializer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.chunk.storage;
 
+import co.aikar.timings.Timings;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
@@ -434,7 +435,6 @@ public class ChunkSerializer {
     private static void func_222650_a(CompoundNBT p_222650_0_, Chunk p_222650_1_) {
         ListNBT nbttaglist = p_222650_0_.func_150295_c("Entities", 10);
         World world = p_222650_1_.func_177412_p();
-        world.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
 
         for (int i = 0; i < nbttaglist.size(); ++i) {
             CompoundNBT nbttagcompound1 = nbttaglist.func_150305_b(i);
@@ -446,8 +446,6 @@ public class ChunkSerializer {
             p_222650_1_.func_177409_g(true);
         }
 
-        world.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
-        world.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         ListNBT nbttaglist1 = p_222650_0_.func_150295_c("TileEntities", 10);
 
         for (int j = 0; j < nbttaglist1.size(); ++j) {
@@ -465,8 +463,6 @@ public class ChunkSerializer {
                 }
             }
         }
-        world.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
-
     }
 
     private static CompoundNBT func_222649_a(ChunkPos p_222649_0_, Map<Structure<?>, StructureStart<?>> p_222649_1_, Map<Structure<?>, LongSet> p_222649_2_) {
diff --git a/src/main/java/net/minecraft/world/server/ChunkManager.java b/src/main/java/net/minecraft/world/server/ChunkManager.java
index 45f4011f500257881cb60a8d48c704b0d94924dc..5d09f688e9b313632f25dcb5dc0693b08415c1fd 100644
--- a/src/main/java/net/minecraft/world/server/ChunkManager.java
+++ b/src/main/java/net/minecraft/world/server/ChunkManager.java
@@ -1,7 +1,9 @@
 package net.minecraft.world.server;
 
+import co.aikar.timings.Timing; // Paper
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
+import com.google.common.collect.ComparisonChain; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
@@ -558,11 +560,14 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
 
     private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223172_f(ChunkPos p_223172_1_) {
         return CompletableFuture.supplyAsync(() -> {
-            try {
+            try (Timing ignored = this.field_219255_i.timings.chunkLoad.startTimingIfSync()) { // Paper
                 this.field_219255_i.func_217381_Z().func_230035_c_("chunkLoad");
-                CompoundNBT nbttagcompound = this.func_219178_f(p_223172_1_);
+                CompoundNBT nbttagcompound; // Paper
+                try (Timing ignored2 = this.field_219255_i.timings.chunkIO.startTimingIfSync()) { // Paper start - timings
+                    nbttagcompound = this.func_219178_f(p_223172_1_);
+                } // Paper end
 
-                if (nbttagcompound != null) {
+                if (nbttagcompound != null) {try (Timing ignored2 = this.field_219255_i.timings.chunkLoadLevelTimer.startTimingIfSync()) { // Paper start - timings
                     boolean flag = nbttagcompound.func_150297_b("Level", 10) && nbttagcompound.func_74775_l("Level").func_150297_b("Status", 8);
 
                     if (flag) {
@@ -574,7 +579,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
                     }
 
                     ChunkManager.field_219250_d.error("Chunk file at {} is missing level data, skipping", p_223172_1_);
-                }
+                }} // Paper
             } catch (ReportedException reportedexception) {
                 Throwable throwable = reportedexception.getCause();
 
@@ -611,7 +616,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
             return "chunkGenerate " + p_223156_2_.func_222596_d();
         });
         return completablefuture.thenComposeAsync((either) -> {
-            return (CompletableFuture) either.map((list) -> {
+            return either.map((list) -> { // Paper - Shut up.
                 try {
                     CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture1 = p_223156_2_.func_223198_a(this.field_219255_i, this.field_219258_l, this.field_219269_w, this.field_219256_j, (ichunkaccess) -> {
                         return this.func_219200_b(p_223156_1_);
@@ -664,6 +669,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
             ChunkStatus chunkstatus = ChunkHolder.func_219278_b(p_219200_1_.func_219299_i());
 
             return !chunkstatus.func_209003_a(ChunkStatus.field_222617_m) ? ChunkHolder.field_219306_a : either.mapLeft((ichunkaccess) -> {
+            try (Timing ignored = field_219255_i.timings.chunkPostLoad.startTimingIfSync()) { // Paper
                 ChunkPos chunkcoordintpair = p_219200_1_.func_219277_h();
                 Chunk chunk;
 
@@ -715,6 +721,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
                 }
 
                 return chunk;
+                } // Paper
             });
         }, (runnable) -> {
             ITaskExecutor mailbox = this.field_219265_s;
@@ -1173,6 +1180,7 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
 
         ChunkManager.EntityTracker playerchunkmap_entitytracker;
         ObjectIterator objectiterator;
+        field_219255_i.timings.tracker1.startTiming(); // Paper
 
         for (objectiterator = this.field_219272_z.values().iterator(); objectiterator.hasNext(); playerchunkmap_entitytracker.field_219402_b.func_219453_a()) {
             playerchunkmap_entitytracker = (ChunkManager.EntityTracker) objectiterator.next();
@@ -1190,16 +1198,20 @@ public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProv
                 playerchunkmap_entitytracker.field_219405_e = sectionposition1;
             }
         }
+        field_219255_i.timings.tracker1.stopTiming(); // Paper
 
         if (!list.isEmpty()) {
             objectiterator = this.field_219272_z.values().iterator();
 
+            field_219255_i.timings.tracker2.startTiming(); // Paper
             while (objectiterator.hasNext()) {
                 playerchunkmap_entitytracker = (ChunkManager.EntityTracker) objectiterator.next();
                 playerchunkmap_entitytracker.func_219397_a(list);
             }
+            field_219255_i.timings.tracker2.stopTiming(); // Paper
         }
 
+
     }
 
     protected void func_219222_a(Entity p_219222_1_, IPacket<?> p_219222_2_) {
diff --git a/src/main/java/net/minecraft/world/server/ServerChunkProvider.java b/src/main/java/net/minecraft/world/server/ServerChunkProvider.java
index 99aab094b5956b2cff43d7c3d0fed67c50d1bfd1..c1e002cb1a3282a4ff3488d7d59a9864102f13c0 100644
--- a/src/main/java/net/minecraft/world/server/ServerChunkProvider.java
+++ b/src/main/java/net/minecraft/world/server/ServerChunkProvider.java
@@ -347,11 +347,13 @@ public class ServerChunkProvider extends AbstractChunkProvider {
             }
 
             gameprofilerfiller.func_230035_c_("getChunkCacheMiss");
-            field_73251_h.timings.syncChunkLoadTimer.startTiming(); // Spigot
             CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_217233_c(p_212849_1_, p_212849_2_, p_212849_3_, p_212849_4_);
 
+            if (!completablefuture.isDone()) { // Paper
+                this.field_73251_h.timings.syncChunkLoad.startTiming(); // Paper
             this.field_217243_i.func_213161_c(completablefuture::isDone);
-            field_73251_h.timings.syncChunkLoadTimer.stopTiming(); // Spigot
+                this.field_73251_h.timings.syncChunkLoad.stopTiming(); // Paper
+            } // Paper
             ichunkaccess = (IChunk) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
                 return ichunkaccess1;
             }, (playerchunk_failure) -> {
@@ -538,7 +540,9 @@ public class ServerChunkProvider extends AbstractChunkProvider {
 
     public void func_217210_a(boolean p_217210_1_) {
         this.func_217235_l();
+        try (co.aikar.timings.Timing timed = field_73251_h.timings.chunkSaveData.startTiming()) { // Paper - Timings
         this.field_217237_a.func_219177_a(p_217210_1_);
+        } // Paper - Timings
     }
 
     @Override
@@ -575,7 +579,9 @@ public class ServerChunkProvider extends AbstractChunkProvider {
         this.func_217235_l();
         this.field_73251_h.timings.doChunkMap.stopTiming(); // Spigot
         this.field_73251_h.func_217381_Z().func_219895_b("chunks");
+        this.field_73251_h.timings.chunks.startTiming(); // Paper - timings
         this.func_217220_m();
+        this.field_73251_h.timings.chunks.stopTiming(); // Paper - timings
         this.field_73251_h.timings.doChunkUnload.startTiming(); // Spigot
         this.field_73251_h.func_217381_Z().func_219895_b("unload");
         this.field_217237_a.func_219204_a(p_217207_1_);
@@ -599,8 +605,10 @@ public class ServerChunkProvider extends AbstractChunkProvider {
             boolean flag2 = field_73251_h.ticksPerAnimalSpawns != 0L && worlddata.func_82573_f() % field_73251_h.ticksPerAnimalSpawns == 0L; // CraftBukkit
 
             this.field_73251_h.func_217381_Z().func_76320_a("naturalSpawnCount");
+            this.field_73251_h.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.field_217240_d.func_219358_b();
             WorldEntitySpawner.EntityDensityManager spawnercreature_d = WorldEntitySpawner.func_234964_a_(l, this.field_73251_h.func_241136_z_(), this::func_241098_a_);
+            this.field_73251_h.timings.countNaturalMobs.stopTiming(); // Paper - timings
 
             this.field_241097_p_ = spawnercreature_d;
             this.field_73251_h.func_217381_Z().func_76319_b();
@@ -611,7 +619,9 @@ public class ServerChunkProvider extends AbstractChunkProvider {
 
                 if (optional.isPresent()) {
                     this.field_73251_h.func_217381_Z().func_76320_a("broadcast");
+                    this.field_73251_h.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
                     playerchunk.func_219274_a((Chunk) optional.get());
+                    this.field_73251_h.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
                     this.field_73251_h.func_217381_Z().func_76319_b();
                     Optional<Chunk> optional1 = ((Either) playerchunk.func_219297_b().getNow(ChunkHolder.field_219308_c)).left();
 
@@ -625,25 +635,25 @@ public class ServerChunkProvider extends AbstractChunkProvider {
                                 WorldEntitySpawner.func_234979_a_(this.field_73251_h, chunk, spawnercreature_d, this.field_217247_m, this.field_217246_l, flag2);
                             }
 
-                            this.field_73251_h.timings.doTickTiles.startTiming(); // Spigot
+                            this.field_73251_h.timings.chunkTicks.startTiming(); // Spigot // Paper
                             this.field_73251_h.func_217441_a(chunk, k);
-                            this.field_73251_h.timings.doTickTiles.stopTiming(); // Spigot
+                            this.field_73251_h.timings.chunkTicks.stopTiming(); // Spigot // Paper
                         }
                     }
                 }
             });
             this.field_73251_h.func_217381_Z().func_76320_a("customSpawners");
             if (flag1) {
+                try (co.aikar.timings.Timing ignored = this.field_73251_h.timings.miscMobSpawning.startTiming()) { // Paper - timings
                 this.field_73251_h.func_241123_a_(this.field_217246_l, this.field_217247_m);
+                } // Paper - timings
             }
 
             this.field_73251_h.func_217381_Z().func_76319_b();
             this.field_73251_h.func_217381_Z().func_76319_b();
         }
 
-        this.field_73251_h.timings.tracker.startTiming(); // Spigot
         this.field_217237_a.func_219169_g();
-        this.field_73251_h.timings.tracker.stopTiming(); // Spigot
     }
 
     private void func_241098_a_(long p_241098_1_, Consumer<Chunk> p_241098_2_) {
diff --git a/src/main/java/net/minecraft/world/server/ServerTickList.java b/src/main/java/net/minecraft/world/server/ServerTickList.java
index 94e5c9b328d2b92e24bc64ee67391975fccbb7a0..254668fc7c95238764f573143af5fca65539f60d 100644
--- a/src/main/java/net/minecraft/world/server/ServerTickList.java
+++ b/src/main/java/net/minecraft/world/server/ServerTickList.java
@@ -40,12 +40,17 @@ public class ServerTickList<T> implements ITickList<T> {
     private final List<NextTickListEntry<T>> field_223189_h = Lists.newArrayList();
     private final Consumer<NextTickListEntry<T>> field_205378_h;
 
-    public ServerTickList(ServerWorld worldserver, Predicate<T> predicate, Function<T, ResourceLocation> function, Consumer<NextTickListEntry<T>> consumer) {
+    public ServerTickList(ServerWorld worldserver, Predicate<T> predicate, Function<T, ResourceLocation> function, Consumer<NextTickListEntry<T>> consumer, String timingsType) { // Paper
         this.field_205371_a = predicate;
         this.field_205372_b = function;
         this.field_205376_f = worldserver;
         this.field_205378_h = consumer;
+        this.timingCleanup = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Cleanup");
+        this.timingTicking = co.aikar.timings.WorldTimingsHandler.getTickList(worldserver, timingsType + " - Ticking");
     }
+    private final co.aikar.timings.Timing timingCleanup; // Paper
+    private final co.aikar.timings.Timing timingTicking; // Paper
+    // Paper end
 
     public void func_205365_a() {
         int i = this.field_205375_e.size();
@@ -68,6 +73,7 @@ public class ServerTickList<T> implements ITickList<T> {
 
             this.field_205376_f.func_217381_Z().func_76320_a("cleaning");
 
+            this.timingCleanup.startTiming(); // Paper
             NextTickListEntry nextticklistentry;
 
             while (i > 0 && iterator.hasNext()) {
@@ -83,7 +89,9 @@ public class ServerTickList<T> implements ITickList<T> {
                     --i;
                 }
             }
+            this.timingCleanup.stopTiming(); // Paper
 
+            this.timingTicking.startTiming(); // Paper
             this.field_205376_f.func_217381_Z().func_219895_b("ticking");
 
             while ((nextticklistentry = (NextTickListEntry) this.field_205377_g.poll()) != null) {
@@ -103,6 +111,7 @@ public class ServerTickList<T> implements ITickList<T> {
                 }
             }
 
+            this.timingTicking.stopTiming(); // Paper
             this.field_205376_f.func_217381_Z().func_76319_b();
             this.field_223189_h.clear();
             this.field_205377_g.clear();
diff --git a/src/main/java/net/minecraft/world/server/ServerWorld.java b/src/main/java/net/minecraft/world/server/ServerWorld.java
index 56547aa014f7aacddce63b48afa9fa058dec4e68..17f37ff2566a0b51dbf5cc34bf52bdd1a5c44de1 100644
--- a/src/main/java/net/minecraft/world/server/ServerWorld.java
+++ b/src/main/java/net/minecraft/world/server/ServerWorld.java
@@ -3,6 +3,8 @@ package net.minecraft.world.server;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
+import co.aikar.timings.TimingHistory; // Paper
+import co.aikar.timings.Timings; // Paper
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
@@ -141,7 +143,6 @@ import org.apache.logging.log4j.Logger;
 import java.util.logging.Level;
 import org.bukkit.Bukkit;
 import org.bukkit.WeatherType;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.WorldUUID;
 import org.bukkit.event.entity.CreatureSpawnEvent;
@@ -197,10 +198,10 @@ public class ServerWorld extends World implements ISeedReader {
         // CraftBukkit end
         this.field_94579_S = new ServerTickList<>(this, (block) -> {
             return block == null || block.func_176223_P().func_196958_f();
-        }, Registry.field_212618_g::func_177774_c, this::func_205338_b);
+        }, Registry.field_212618_g::func_177774_c, this::func_205338_b, "Blocks"); // Paper - Timings
         this.field_205342_P = new ServerTickList<>(this, (fluidtype) -> {
             return fluidtype == null || fluidtype == Fluids.field_204541_a;
-        }, Registry.field_212619_h::func_177774_c, this::func_205339_a);
+        }, Registry.field_212619_h::func_177774_c, this::func_205339_a, "Fluids"); // Paper - Timings
         this.field_217495_I = Sets.newHashSet();
         this.field_147490_S = new ObjectLinkedOpenHashSet();
         this.field_241107_Q_ = flag1;
@@ -428,17 +429,21 @@ public class ServerWorld extends World implements ISeedReader {
         this.func_72966_v();
         this.func_241126_b_();
         gameprofilerfiller.func_219895_b("chunkSource");
+        this.timings.chunkProviderTick.startTiming(); // Paper - timings
         this.E().func_217207_a(p_72835_1_);
+        this.timings.chunkProviderTick.stopTiming(); // Paper - timings
         gameprofilerfiller.func_219895_b("tickPending");
-        timings.doTickPending.startTiming(); // Spigot
+        timings.scheduledBlocks.startTiming(); // Paper
         if (!this.func_234925_Z_()) {
             this.field_94579_S.func_205365_a();
             this.field_205342_P.func_205365_a();
         }
-        timings.doTickPending.stopTiming(); // Spigot
+        timings.scheduledBlocks.stopTiming(); // Paper
 
         gameprofilerfiller.func_219895_b("raid");
+        this.timings.raids.startTiming(); // Paper - timings
         this.field_217494_c.func_215171_a();
+        this.timings.raids.stopTiming(); // Paper - timings
         gameprofilerfiller.func_219895_b("blockEvents");
         timings.doSounds.startTiming(); // Spigot
         this.func_147488_Z();
@@ -610,6 +615,7 @@ public class ServerWorld extends World implements ISeedReader {
         }
 
         gameprofilerfiller.func_219895_b("tickBlocks");
+        timings.chunkTicksBlocks.startTiming(); // Paper
         if (p_217441_2_ > 0) {
             ChunkSection[] achunksection = p_217441_1_.func_76587_i();
             int l = achunksection.length;
@@ -641,7 +647,7 @@ public class ServerWorld extends World implements ISeedReader {
                 }
             }
         }
-
+        timings.chunkTicksBlocks.stopTiming(); // Paper
         gameprofilerfiller.func_76319_b();
     }
 
@@ -739,6 +745,7 @@ public class ServerWorld extends World implements ISeedReader {
         if (!(p_217479_1_ instanceof PlayerEntity) && !this.E().func_217204_a(p_217479_1_)) {
             this.func_217464_b(p_217479_1_);
         } else {
+            ++TimingHistory.entityTicks; // Paper - timings
             // Spigot start
             if (!org.spigotmc.ActivationRange.checkIfActive(p_217479_1_)) {
                 p_217479_1_.field_70173_aa++;
@@ -746,7 +753,9 @@ public class ServerWorld extends World implements ISeedReader {
                 return;
             }
             // Spigot end
+            TimingHistory.activatedEntityTicks++; // Paper - timings
             p_217479_1_.tickTimer.startTiming(); // Spigot
+            try { // Paper - timings
             p_217479_1_.func_226286_f_(p_217479_1_.func_226277_ct_(), p_217479_1_.func_226278_cu_(), p_217479_1_.func_226281_cx_());
             p_217479_1_.field_70126_B = p_217479_1_.field_70177_z;
             p_217479_1_.field_70127_C = p_217479_1_.field_70125_A;
@@ -773,7 +782,9 @@ public class ServerWorld extends World implements ISeedReader {
                     this.func_217459_a(p_217479_1_, entity1);
                 }
             }
+            } finally { // Paper - timings
             p_217479_1_.tickTimer.stopTiming(); // Spigot
+            } // Paper - timings
 
         }
     }
@@ -850,6 +861,7 @@ public class ServerWorld extends World implements ISeedReader {
 
         if (!p_217445_3_) {
             org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
+            try (co.aikar.timings.Timing ignored = timings.worldSave.startTiming()) { // Paper
             if (p_217445_1_ != null) {
                 p_217445_1_.func_200210_a(new TranslationTextComponent("menu.savingLevel"));
             }
@@ -859,7 +871,10 @@ public class ServerWorld extends World implements ISeedReader {
                 p_217445_1_.func_200209_c(new TranslationTextComponent("menu.savingChunks"));
             }
 
+            timings.worldSaveChunks.startTiming(); // Paper
             chunkproviderserver.func_217210_a(p_217445_2_);
+            timings.worldSaveChunks.stopTiming(); // Paper
+            } // Paper
         }
 
         // CraftBukkit start - moved from MinecraftServer.saveChunks
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 596862d3e9c36bce522d10c69d55779e500e1ca7..1b96e4329965789f67b6d9929ba2b75c042e5414 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2058,12 +2058,31 @@ public final class CraftServer implements Server {
     private final Spigot spigot = new Spigot()
     {
 
+        @Deprecated
         @Override
         public YamlConfiguration getConfig()
         {
             return org.spigotmc.SpigotConfig.config;
         }
 
+        @Override
+        public YamlConfiguration getBukkitConfig()
+        {
+            return configuration;
+        }
+
+        @Override
+        public YamlConfiguration getSpigotConfig()
+        {
+            return org.spigotmc.SpigotConfig.config;
+        }
+
+        @Override
+        public YamlConfiguration getPaperConfig()
+        {
+            return com.destroystokyo.paper.PaperConfig.config;
+        }
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java b/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
deleted file mode 100644
index d99415e2ab55ca5083fa94c4ae84dea2fd3abc7f..0000000000000000000000000000000000000000
--- a/src/main/java/org/bukkit/craftbukkit/SpigotTimings.java
+++ /dev/null
@@ -1,163 +0,0 @@
-package org.bukkit.craftbukkit;
-
-import java.util.HashMap;
-import net.minecraft.entity.Entity;
-import net.minecraft.tileentity.TileEntity;
-import net.minecraft.world.World;
-import net.minecraft.world.storage.ServerWorldInfo;
-import org.bukkit.craftbukkit.scheduler.CraftTask;
-import org.bukkit.plugin.java.JavaPluginLoader;
-import org.bukkit.scheduler.BukkitTask;
-import org.spigotmc.CustomTimingsHandler;
-
-public class SpigotTimings {
-
-    public static final CustomTimingsHandler serverTickTimer = new CustomTimingsHandler("** Full Server Tick");
-    public static final CustomTimingsHandler playerListTimer = new CustomTimingsHandler("Player List");
-    public static final CustomTimingsHandler commandFunctionsTimer = new CustomTimingsHandler("Command Functions");
-    public static final CustomTimingsHandler connectionTimer = new CustomTimingsHandler("Connection Handler");
-    public static final CustomTimingsHandler playerConnectionTimer = new CustomTimingsHandler("** PlayerConnection");
-    public static final CustomTimingsHandler tickablesTimer = new CustomTimingsHandler("Tickables");
-    public static final CustomTimingsHandler schedulerTimer = new CustomTimingsHandler("Scheduler");
-    public static final CustomTimingsHandler timeUpdateTimer = new CustomTimingsHandler("Time Update");
-    public static final CustomTimingsHandler serverCommandTimer = new CustomTimingsHandler("Server Command");
-    public static final CustomTimingsHandler worldSaveTimer = new CustomTimingsHandler("World Save");
-
-    public static final CustomTimingsHandler entityMoveTimer = new CustomTimingsHandler("** entityMove");
-    public static final CustomTimingsHandler tickEntityTimer = new CustomTimingsHandler("** tickEntity");
-    public static final CustomTimingsHandler activatedEntityTimer = new CustomTimingsHandler("** activatedTickEntity");
-    public static final CustomTimingsHandler tickTileEntityTimer = new CustomTimingsHandler("** tickTileEntity");
-
-    public static final CustomTimingsHandler timerEntityBaseTick = new CustomTimingsHandler("** livingEntityBaseTick");
-    public static final CustomTimingsHandler timerEntityAI = new CustomTimingsHandler("** livingEntityAI");
-    public static final CustomTimingsHandler timerEntityAICollision = new CustomTimingsHandler("** livingEntityAICollision");
-    public static final CustomTimingsHandler timerEntityAIMove = new CustomTimingsHandler("** livingEntityAIMove");
-    public static final CustomTimingsHandler timerEntityTickRest = new CustomTimingsHandler("** livingEntityTickRest");
-
-    public static final CustomTimingsHandler processQueueTimer = new CustomTimingsHandler("processQueue");
-    public static final CustomTimingsHandler schedulerSyncTimer = new CustomTimingsHandler("** Scheduler - Sync Tasks", JavaPluginLoader.pluginParentTimer);
-
-    public static final CustomTimingsHandler playerCommandTimer = new CustomTimingsHandler("** playerCommand");
-
-    public static final CustomTimingsHandler entityActivationCheckTimer = new CustomTimingsHandler("entityActivationCheck");
-    public static final CustomTimingsHandler checkIfActiveTimer = new CustomTimingsHandler("** checkIfActive");
-
-    public static final HashMap<String, CustomTimingsHandler> entityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
-    public static final HashMap<String, CustomTimingsHandler> tileEntityTypeTimingMap = new HashMap<String, CustomTimingsHandler>();
-    public static final HashMap<String, CustomTimingsHandler> pluginTaskTimingMap = new HashMap<String, CustomTimingsHandler>();
-
-    /**
-     * Gets a timer associated with a plugins tasks.
-     * @param task
-     * @param period
-     * @return
-     */
-    public static CustomTimingsHandler getPluginTaskTimings(BukkitTask task, long period) {
-        if (!task.isSync()) {
-            return null;
-        }
-        String plugin;
-        final CraftTask ctask = (CraftTask) task;
-
-        if (task.getOwner() != null) {
-            plugin = task.getOwner().getDescription().getFullName();
-        } else {
-            plugin = "Unknown";
-        }
-        String taskname = ctask.getTaskName();
-
-        String name = "Task: " + plugin + " Runnable: " + taskname;
-        if (period > 0) {
-            name += "(interval:" + period +")";
-        } else {
-            name += "(Single)";
-        }
-        CustomTimingsHandler result = pluginTaskTimingMap.get(name);
-        if (result == null) {
-            result = new CustomTimingsHandler(name, SpigotTimings.schedulerSyncTimer);
-            pluginTaskTimingMap.put(name, result);
-        }
-        return result;
-    }
-
-    /**
-     * Get a named timer for the specified entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static CustomTimingsHandler getEntityTimings(Entity entity) {
-        String entityType = entity.getClass().getName();
-        CustomTimingsHandler result = entityTypeTimingMap.get(entityType);
-        if (result == null) {
-            result = new CustomTimingsHandler("** tickEntity - " + entity.getClass().getSimpleName(), activatedEntityTimer);
-            entityTypeTimingMap.put(entityType, result);
-        }
-        return result;
-    }
-
-    /**
-     * Get a named timer for the specified tile entity type to track type specific timings.
-     * @param entity
-     * @return
-     */
-    public static CustomTimingsHandler getTileEntityTimings(TileEntity entity) {
-        String entityType = entity.getClass().getName();
-        CustomTimingsHandler result = tileEntityTypeTimingMap.get(entityType);
-        if (result == null) {
-            result = new CustomTimingsHandler("** tickTileEntity - " + entity.getClass().getSimpleName(), tickTileEntityTimer);
-            tileEntityTypeTimingMap.put(entityType, result);
-        }
-        return result;
-    }
-
-    /**
-     * Set of timers per world, to track world specific timings.
-     */
-    public static class WorldTimingsHandler {
-        public final CustomTimingsHandler mobSpawn;
-        public final CustomTimingsHandler doChunkUnload;
-        public final CustomTimingsHandler doTickPending;
-        public final CustomTimingsHandler doTickTiles;
-        public final CustomTimingsHandler doChunkMap;
-        public final CustomTimingsHandler doSounds;
-        public final CustomTimingsHandler entityTick;
-        public final CustomTimingsHandler tileEntityTick;
-        public final CustomTimingsHandler tileEntityPending;
-        public final CustomTimingsHandler tracker;
-        public final CustomTimingsHandler doTick;
-        public final CustomTimingsHandler tickEntities;
-
-        public final CustomTimingsHandler syncChunkLoadTimer;
-        public final CustomTimingsHandler syncChunkLoadStructuresTimer;
-        public final CustomTimingsHandler syncChunkLoadEntitiesTimer;
-        public final CustomTimingsHandler syncChunkLoadTileEntitiesTimer;
-        public final CustomTimingsHandler syncChunkLoadTileTicksTimer;
-        public final CustomTimingsHandler syncChunkLoadPostTimer;
-
-        public WorldTimingsHandler(World server) {
-            String name = ((ServerWorldInfo) server.field_72986_A).func_76065_j() + " - ";
-
-            mobSpawn = new CustomTimingsHandler("** " + name + "mobSpawn");
-            doChunkUnload = new CustomTimingsHandler("** " + name + "doChunkUnload");
-            doTickPending = new CustomTimingsHandler("** " + name + "doTickPending");
-            doTickTiles = new CustomTimingsHandler("** " + name + "doTickTiles");
-            doChunkMap = new CustomTimingsHandler("** " + name + "doChunkMap");
-            doSounds = new CustomTimingsHandler("** " + name + "doSounds");
-            entityTick = new CustomTimingsHandler("** " + name + "entityTick");
-            tileEntityTick = new CustomTimingsHandler("** " + name + "tileEntityTick");
-            tileEntityPending = new CustomTimingsHandler("** " + name + "tileEntityPending");
-
-            syncChunkLoadTimer = new CustomTimingsHandler("** " + name + "syncChunkLoad");
-            syncChunkLoadStructuresTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Structures");
-            syncChunkLoadEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Entities");
-            syncChunkLoadTileEntitiesTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileEntities");
-            syncChunkLoadTileTicksTimer = new CustomTimingsHandler("** " + name + "chunkLoad - TileTicks");
-            syncChunkLoadPostTimer = new CustomTimingsHandler("** " + name + "chunkLoad - Post");
-
-
-            tracker = new CustomTimingsHandler(name + "tracker");
-            doTick = new CustomTimingsHandler(name + "doTick");
-            tickEntities = new CustomTimingsHandler(name + "tickEntities");
-        }
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 53279e2ebb8de8039e6af8bdb835cc6e651e5d16..dbfc07363eb80af32ecf31fb3ea18b8466867869 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1777,6 +1777,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             packet.components = components;
             getHandle().field_71135_a.func_147359_a(packet);
         }
+
+        // Paper start
+        @Override
+        public int getPing()
+        {
+            return getHandle().field_71138_i;
+        }
+        // Paper end
     };
 
     public Player.Spigot spigot()
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 18f29de500890589e448b3b769cfe593ea064d6b..8350ffc5bc23a19b70ee0baf0a5323418500ed59 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.scheduler;
 
+import co.aikar.timings.MinecraftTimings; // Paper
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -179,7 +180,8 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     public BukkitTask scheduleInternalTask(Runnable run, int delay, String taskName) {
-        final CraftTask task = new CraftTask(run, nextId(), taskName);
+        final CraftTask task = new CraftTask(run, nextId(), "Internal - " + (taskName != null ? taskName : "Unknown"));
+        task.internal = true;
         return handle(task, delay);
     }
 
@@ -260,7 +262,7 @@ public class CraftScheduler implements BukkitScheduler {
                         }
                         return false;
                     }
-                });
+                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer();}}; // Paper
         handle(task, 0L);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -295,7 +297,7 @@ public class CraftScheduler implements BukkitScheduler {
                             }
                         }
                     }
-                });
+                }){{this.timings=co.aikar.timings.MinecraftTimings.getCancelTasksTimer(plugin);}}; // Paper
         handle(task, 0L);
         for (CraftTask taskPending = head.getNext(); taskPending != null; taskPending = taskPending.getNext()) {
             if (taskPending == task) {
@@ -402,9 +404,7 @@ public class CraftScheduler implements BukkitScheduler {
             if (task.isSync()) {
                 currentTask = task;
                 try {
-                    task.timings.startTiming(); // Spigot
                     task.run();
-                    task.timings.stopTiming(); // Spigot
                 } catch (final Throwable throwable) {
                     // Paper start
                     String msg = String.format(
@@ -438,8 +438,10 @@ public class CraftScheduler implements BukkitScheduler {
                 runners.remove(task.getTaskId());
             }
         }
+        MinecraftTimings.bukkitSchedulerFinishTimer.startTiming();
         pending.addAll(temp);
         temp.clear();
+        MinecraftTimings.bukkitSchedulerFinishTimer.stopTiming();
         debugHead = debugHead.getNextHead(currentTick);
     }
 
@@ -472,6 +474,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     private void parsePending() {
+        MinecraftTimings.bukkitSchedulerPendingTimer.startTiming();
         CraftTask head = this.head;
         CraftTask task = head.getNext();
         CraftTask lastTask = head;
@@ -490,6 +493,7 @@ public class CraftScheduler implements BukkitScheduler {
             task.setNext(null);
         }
         this.head = lastTask;
+        MinecraftTimings.bukkitSchedulerPendingTimer.stopTiming();
     }
 
     private boolean isReady(final int currentTick) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index d85e21b75054067b926ecfee89d62c6dd0744189..9d0d1598bfce2f51998395faf39d8bd2f5d3f9f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -1,9 +1,11 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import java.util.function.Consumer;
+
+import co.aikar.timings.NullTimingHandler;
 import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.SpigotTimings; // Spigot
-import org.spigotmc.CustomTimingsHandler; // Spigot
+import co.aikar.timings.MinecraftTimings; // Paper
+import co.aikar.timings.Timing; // Paper
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
@@ -26,12 +28,12 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      */
     private volatile long period;
     private long nextRun;
-    private final Runnable rTask;
-    private final Consumer<BukkitTask> cTask;
+    public final Runnable rTask; // Paper
+    public final Consumer<BukkitTask> cTask; // Paper
+    public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
 
-    final CustomTimingsHandler timings; // Spigot
     CraftTask() {
         this(null, null, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
     }
@@ -51,7 +53,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.id = id;
         this.period = CraftTask.NO_REPEATING;
         this.taskName = taskName;
-        this.timings = null; // Will be changed in later patch
+        this.timings = MinecraftTimings.getInternalTaskName(taskName);
     }
     // Paper end
 
@@ -72,7 +74,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         }
         this.id = id;
         this.period = period;
-        this.timings = this.isSync() ? SpigotTimings.getPluginTaskTimings(this, period) : null; // Spigot
+        timings = task != null ? MinecraftTimings.getPluginTaskTimings(this, period) : NullTimingHandler.NULL; // Paper
     }
 
     @Override
@@ -92,11 +94,13 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
 
     @Override
     public void run() {
+        try (Timing ignored = timings.startTiming()) { // Paper
         if (rTask != null) {
             rTask.run();
         } else {
             cTask.accept(this);
         }
+        } // Paper
     }
 
     long getPeriod() {
@@ -123,7 +127,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.next = next;
     }
 
-    Class<?> getTaskClass() {
+    public Class<?> getTaskClass() {
         return (rTask != null) ? rTask.getClass() : ((cTask != null) ? cTask.getClass() : null);
     }
 
@@ -147,9 +151,4 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         return true;
     }
 
-    // Spigot start
-    public String getTaskName() {
-        return (getTaskClass() == null) ? "Unknown" : getTaskClass().getName();
-    }
-    // Spigot end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
index e52ef47b783785dc214746b678e7b549aea9a274..3d90b3426873a3528af14f7f1ab0adae0027da2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftIconCache.java
@@ -5,6 +5,7 @@ import org.bukkit.util.CachedServerIcon;
 public class CraftIconCache implements CachedServerIcon {
     public final String value;
 
+    public String getData() { return value; } // Paper
     public CraftIconCache(final String value) {
         this.value = value;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index c445d19d98fc71c5e0cb5996f1aeb1f65137626c..435c0c087a126a021bb487119bc0ab152daf4a96 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -138,6 +138,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return CraftNamespacedKey.toMinecraft(mat.getKey());
     }
     // ========================================================================
+    // Paper start
+    @Override
+    public void reportTimings() {
+        co.aikar.timings.TimingsExport.reportTimings();
+    }
+    // Paper end
 
     public static byte toLegacyData(BlockState data) {
         return CraftLegacy.toLegacyData(data);
@@ -312,6 +318,13 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return clazz;
     }
 
+    // Paper start
+    @Override
+    public String getTimingsServerName() {
+        return com.destroystokyo.paper.PaperConfig.timingsServerName;
+    }
+    // Paper end
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index f593c0c8eeb5847e1af29a72e72eb8622d765ff3..ea84fe667a07992fa8e04d8b8983711f5cf492a4 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -30,7 +30,7 @@ import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
-import org.bukkit.craftbukkit.SpigotTimings;
+import co.aikar.timings.MinecraftTimings;
 
 public class ActivationRange
 {
@@ -74,8 +74,8 @@ public class ActivationRange
     /**
      * These entities are excluded from Activation range checks.
      *
-     * @param entity
-     * @param config
+     * @param entity Entity to initialize
+     * @param config Spigot config to determine ranges
      * @return boolean If it should always tick.
      */
     public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
@@ -110,7 +110,7 @@ public class ActivationRange
      */
     public static void activateEntities(World world)
     {
-        SpigotTimings.entityActivationCheckTimer.startTiming();
+        MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -147,7 +147,7 @@ public class ActivationRange
                 }
             }
         }
-        SpigotTimings.entityActivationCheckTimer.stopTiming();
+        MinecraftTimings.entityActivationCheckTimer.stopTiming();
     }
 
     /**
@@ -244,10 +244,8 @@ public class ActivationRange
      */
     public static boolean checkIfActive(Entity entity)
     {
-        SpigotTimings.checkIfActiveTimer.startTiming();
         // Never safe to skip fireworks or entities not yet added to chunk
         if ( !entity.field_70175_ag || entity instanceof FireworkRocketEntity ) {
-            SpigotTimings.checkIfActiveTimer.stopTiming();
             return true;
         }
 
@@ -271,7 +269,6 @@ public class ActivationRange
         {
             isActive = false;
         }
-        SpigotTimings.checkIfActiveTimer.stopTiming();
         return isActive;
     }
 }
