From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Brown <zach@zachbr.io>
Date: Wed, 2 Jan 2019 00:35:43 -0600
Subject: [PATCH] Add APIs to replace OfflinePlayer#getLastPlayed

Currently OfflinePlayer#getLastPlayed could more accurately be described
as "OfflinePlayer#getLastTimeTheirDataWasSaved".

The API doc says it should return the last time the server "witnessed"
the player, whilst also saying it should return the last time they
logged in. The current implementation does neither.

Given this interesting contradiction in the API documentation and the
current defacto implementation, I've elected to deprecate (with no
intent to remove) and replace it with two new methods, clearly named and
documented as to their purpose.

diff --git a/src/main/java/net/minecraft/entity/player/ServerPlayerEntity.java b/src/main/java/net/minecraft/entity/player/ServerPlayerEntity.java
index 1eec86abb8483697e4139e1bba39ff04cd751a78..dac2407e061e19c0256d71b9e8d32418770765d5 100644
--- a/src/main/java/net/minecraft/entity/player/ServerPlayerEntity.java
+++ b/src/main/java/net/minecraft/entity/player/ServerPlayerEntity.java
@@ -202,6 +202,7 @@ public class ServerPlayerEntity extends PlayerEntity implements IContainerListen
     public int field_71138_i;
     public boolean field_71136_j;
     private int containerUpdateDelay; // Paper
+    public long loginTime; // Paper
     // Paper start - cancellable death event
     public boolean queueHealthUpdatePacket = false;
     public net.minecraft.network.play.server.SUpdateHealthPacket queuedHealthUpdatePacket;
diff --git a/src/main/java/net/minecraft/server/management/PlayerList.java b/src/main/java/net/minecraft/server/management/PlayerList.java
index 19be61bc0ab9d2bf13d3c7b82ce6225071083dc4..e31473209f60f05ec9bf2775da8df3fce5de8c51 100644
--- a/src/main/java/net/minecraft/server/management/PlayerList.java
+++ b/src/main/java/net/minecraft/server/management/PlayerList.java
@@ -164,6 +164,7 @@ public abstract class PlayerList {
     }
 
     public void func_72355_a(NetworkManager p_72355_1_, ServerPlayerEntity p_72355_2_) {
+        p_72355_2_.loginTime = System.currentTimeMillis(); // Paper
         GameProfile gameprofile = p_72355_2_.func_146103_bH();
         PlayerProfileCache usercache = this.field_72400_f.func_152358_ax();
         GameProfile gameprofile1 = usercache.func_152652_a(gameprofile.getId());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index b08c67dd8de9d17352cd32b3bd58cd9b9800605e..79bdf28975daba483f01eb00294bdfdb64ad4260 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -244,6 +244,61 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return getData() != null;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastLogin();
+
+        CompoundNBT data = getPaperData();
+
+        if (data != null) {
+            if (data.func_74764_b("LastLogin")) {
+                return data.func_74763_f("LastLogin");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    @Override
+    public long getLastSeen() {
+        Player player = getPlayer();
+        if (player != null) return player.getLastSeen();
+
+        CompoundNBT data = getPaperData();
+
+        if (data != null) {
+            if (data.func_74764_b("LastSeen")) {
+                return data.func_74763_f("LastSeen");
+            } else {
+                // if the player file cannot provide accurate data, this is probably the closest we can approximate
+                File file = getDataFile();
+                return file.lastModified();
+            }
+        } else {
+            return 0;
+        }
+    }
+
+    private CompoundNBT getPaperData() {
+        CompoundNBT result = getData();
+
+        if (result != null) {
+            if (!result.func_74764_b("Paper")) {
+                result.func_218657_a("Paper", new CompoundNBT());
+            }
+            result = result.func_74775_l("Paper");
+        }
+
+        return result;
+    }
+    // Paper end
+
     @Override
     public Location getBedSpawnLocation() {
         CompoundNBT data = getData();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 6e5ad3a59d82529797686af0ea92fa18c0106ce3..d74b32c40b2e8904c5c67201ac3ce3378c70d1c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -144,6 +144,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
     private static final boolean DISABLE_CHANNEL_LIMIT = System.getProperty("paper.disableChannelLimit") != null; // Paper - add a flag to disable the channel limit
+    private long lastSaveTime;
     // Paper end
 
     public CraftPlayer(CraftServer server, ServerPlayerEntity entity) {
@@ -1411,6 +1412,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.firstPlayed = firstPlayed;
     }
 
+    // Paper start
+    @Override
+    public long getLastLogin() {
+        return getHandle().loginTime;
+    }
+
+    @Override
+    public long getLastSeen() {
+        return isOnline() ? System.currentTimeMillis() : this.lastSaveTime;
+    }
+    // Paper end
+
     public void readExtraData(CompoundNBT nbttagcompound) {
         hasPlayedBefore = true;
         if (nbttagcompound.func_74764_b("bukkit")) {
@@ -1433,6 +1446,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setExtraData(CompoundNBT nbttagcompound) {
+        this.lastSaveTime = System.currentTimeMillis(); // Paper
+
         if (!nbttagcompound.func_74764_b("bukkit")) {
             nbttagcompound.func_218657_a("bukkit", new CompoundNBT());
         }
@@ -1447,6 +1462,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.func_74772_a("firstPlayed", getFirstPlayed());
         data.func_74772_a("lastPlayed", System.currentTimeMillis());
         data.func_74778_a("lastKnownName", handle.func_195047_I_());
+
+        // Paper start - persist for use in offline save data
+        if (!nbttagcompound.func_74764_b("Paper")) {
+            nbttagcompound.func_218657_a("Paper", new CompoundNBT());
+        }
+
+        CompoundNBT paper = nbttagcompound.func_74775_l("Paper");
+        paper.func_74772_a("LastLogin", handle.loginTime);
+        paper.func_74772_a("LastSeen", System.currentTimeMillis());
+        // Paper end
     }
 
     @Override
